
nuf446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003768  08003768  00004768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003780  08003780  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003780  08003780  00004780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003788  08003788  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003790  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  0800379c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  0800379c  0000522c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5c5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  00012601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00014370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  00015020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a5e  00000000  00000000  00015a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e629  00000000  00000000  00037475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d054e  00000000  00000000  00045a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115fec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000356c  00000000  00000000  00116030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011959c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003750 	.word	0x08003750

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003750 	.word	0x08003750

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if (htim == &htim13) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a13      	ldr	r2, [pc, #76]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d104      	bne.n	800054a <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000540:	2120      	movs	r1, #32
 8000542:	4812      	ldr	r0, [pc, #72]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000544:	f000 fff9 	bl	800153a <HAL_GPIO_TogglePin>
		}
		else {
			HAL_TIM_Base_Stop_IT(&htim14);
		}
	}
}
 8000548:	e01a      	b.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x50>
	else if (htim == &htim4) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a10      	ldr	r2, [pc, #64]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d116      	bne.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x50>
		if (UartDataCount < UartDataSize) {
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	d20d      	bcs.n	800057a <HAL_TIM_PeriodElapsedCallback+0x4a>
			huart2.Instance->DR = UartBufPointer[UartDataCount++];
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	1c59      	adds	r1, r3, #1
 8000568:	b2c8      	uxtb	r0, r1
 800056a:	490a      	ldr	r1, [pc, #40]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800056c:	7008      	strb	r0, [r1, #0]
 800056e:	4413      	add	r3, r2
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
}
 8000578:	e002      	b.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x50>
			HAL_TIM_Base_Stop_IT(&htim14);
 800057a:	480a      	ldr	r0, [pc, #40]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800057c:	f001 ff58 	bl	8002430 <HAL_TIM_Base_Stop_IT>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000148 	.word	0x20000148
 800058c:	40020000 	.word	0x40020000
 8000590:	200000b8 	.word	0x200000b8
 8000594:	20000224 	.word	0x20000224
 8000598:	20000225 	.word	0x20000225
 800059c:	20000220 	.word	0x20000220
 80005a0:	200001d8 	.word	0x200001d8
 80005a4:	20000190 	.word	0x20000190

080005a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ac:	f000 fc94 	bl	8000ed8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005b0:	f000 f826 	bl	8000600 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005b4:	f000 fa4a 	bl	8000a4c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b8:	f000 fa1e 	bl	80009f8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80005bc:	f000 f892 	bl	80006e4 <MX_TIM2_Init>
	MX_TIM3_Init();
 80005c0:	f000 f8dc 	bl	800077c <MX_TIM3_Init>
	MX_TIM5_Init();
 80005c4:	f000 f982 	bl	80008cc <MX_TIM5_Init>
	MX_TIM13_Init();
 80005c8:	f000 f9ce 	bl	8000968 <MX_TIM13_Init>
	MX_TIM14_Init();
 80005cc:	f000 f9f0 	bl	80009b0 <MX_TIM14_Init>
	MX_TIM4_Init();
 80005d0:	f000 f92e 	bl	8000830 <MX_TIM4_Init>
 * TIM13:	General		APB1(90MHz)		16bit	Prescaled to 1kHz. 1cyele = 1ms.
 * TIM14:	General		APB1(90MHz)		16bit	Prescaled to 1MHz. 1cyele = 1us.
 *
*/

	HAL_TIM_Base_Start_IT(&htim13); // TIM13スタート
 80005d4:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <main+0x50>)
 80005d6:	f001 febb 	bl	8002350 <HAL_TIM_Base_Start_IT>

	// これで1usウェイトになる
	HAL_TIM_Base_Start(&htim14);	   // TIM14スタート
 80005da:	4808      	ldr	r0, [pc, #32]	@ (80005fc <main+0x54>)
 80005dc:	f001 fe50 	bl	8002280 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim14, 0); // TIM14カウンタに0をセット
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <main+0x54>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim14) < 1); // TIM14カウンタが1未満のときループ
 80005e8:	bf00      	nop
 80005ea:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <main+0x54>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0fa      	beq.n	80005ea <main+0x42>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x4c>
 80005f8:	20000148 	.word	0x20000148
 80005fc:	20000190 	.word	0x20000190

08000600 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f872 	bl	80036f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b2c      	ldr	r3, [pc, #176]	@ (80006dc <SystemClock_Config+0xdc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a2b      	ldr	r2, [pc, #172]	@ (80006dc <SystemClock_Config+0xdc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <SystemClock_Config+0xdc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <SystemClock_Config+0xe0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a25      	ldr	r2, [pc, #148]	@ (80006e0 <SystemClock_Config+0xe0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000674:	23b4      	movs	r3, #180	@ 0xb4
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fb0b 	bl	8001ca4 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000694:	f000 fa48 	bl	8000b28 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000698:	f000 ff6a 	bl	8001570 <HAL_PWREx_EnableOverDrive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80006a2:	f000 fa41 	bl	8000b28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2105      	movs	r1, #5
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 ffa3 	bl	8001610 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80006d0:	f000 fa2a 	bl	8000b28 <Error_Handler>
	}
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_TIM2_Init+0x94>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_TIM2_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_TIM2_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_TIM2_Init+0x94>)
 8000716:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800071a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_TIM2_Init+0x94>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_TIM2_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000728:	4813      	ldr	r0, [pc, #76]	@ (8000778 <MX_TIM2_Init+0x94>)
 800072a:	f001 fd59 	bl	80021e0 <HAL_TIM_Base_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000734:	f000 f9f8 	bl	8000b28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4619      	mov	r1, r3
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_TIM2_Init+0x94>)
 8000746:	f002 f8a3 	bl	8002890 <HAL_TIM_ConfigClockSource>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000750:	f000 f9ea 	bl	8000b28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_TIM2_Init+0x94>)
 8000762:	f002 fc75 	bl	8003050 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 800076c:	f000 f9dc 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000028 	.word	0x20000028

0800077c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800079e:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007a0:	4a22      	ldr	r2, [pc, #136]	@ (800082c <MX_TIM3_Init+0xb0>)
 80007a2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007b6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c4:	4818      	ldr	r0, [pc, #96]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007c6:	f001 fe62 	bl	800248e <HAL_TIM_PWM_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 80007d0:	f000 f9aa 	bl	8000b28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4619      	mov	r1, r3
 80007e2:	4811      	ldr	r0, [pc, #68]	@ (8000828 <MX_TIM3_Init+0xac>)
 80007e4:	f002 fc34 	bl	8003050 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 80007ee:	f000 f99b 	bl	8000b28 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f2:	2360      	movs	r3, #96	@ 0x60
 80007f4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2204      	movs	r2, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	@ (8000828 <MX_TIM3_Init+0xac>)
 800080a:	f001 ff7f 	bl	800270c <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8000814:	f000 f988 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <MX_TIM3_Init+0xac>)
 800081a:	f000 fa5b 	bl	8000cd4 <HAL_TIM_MspPostInit>
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000070 	.word	0x20000070
 800082c:	40000400 	.word	0x40000400

08000830 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800084c:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <MX_TIM4_Init+0x94>)
 800084e:	4a1e      	ldr	r2, [pc, #120]	@ (80008c8 <MX_TIM4_Init+0x98>)
 8000850:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_TIM4_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_TIM4_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800085e:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <MX_TIM4_Init+0x94>)
 8000860:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000864:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_TIM4_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_TIM4_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000872:	4814      	ldr	r0, [pc, #80]	@ (80008c4 <MX_TIM4_Init+0x94>)
 8000874:	f001 fcb4 	bl	80021e0 <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 800087e:	f000 f953 	bl	8000b28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000886:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4619      	mov	r1, r3
 800088e:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <MX_TIM4_Init+0x94>)
 8000890:	f001 fffe 	bl	8002890 <HAL_TIM_ConfigClockSource>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 800089a:	f000 f945 	bl	8000b28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	@ (80008c4 <MX_TIM4_Init+0x94>)
 80008ac:	f002 fbd0 	bl	8003050 <HAL_TIMEx_MasterConfigSynchronization>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 80008b6:	f000 f937 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000b8 	.word	0x200000b8
 80008c8:	40000800 	.word	0x40000800

080008cc <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_TIM5_Init+0x94>)
 80008ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000964 <MX_TIM5_Init+0x98>)
 80008ec:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_TIM5_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_TIM5_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_TIM5_Init+0x94>)
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000900:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_TIM5_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_TIM5_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800090e:	4814      	ldr	r0, [pc, #80]	@ (8000960 <MX_TIM5_Init+0x94>)
 8000910:	f001 fc66 	bl	80021e0 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM5_Init+0x52>
	{
		Error_Handler();
 800091a:	f000 f905 	bl	8000b28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000922:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_TIM5_Init+0x94>)
 800092c:	f001 ffb0 	bl	8002890 <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM5_Init+0x6e>
	{
		Error_Handler();
 8000936:	f000 f8f7 	bl	8000b28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	@ (8000960 <MX_TIM5_Init+0x94>)
 8000948:	f002 fb82 	bl	8003050 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM5_Init+0x8a>
	{
		Error_Handler();
 8000952:	f000 f8e9 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000100 	.word	0x20000100
 8000964:	40000c00 	.word	0x40000c00

08000968 <MX_TIM13_Init>:
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_TIM13_Init+0x40>)
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <MX_TIM13_Init+0x44>)
 8000970:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 22500;
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <MX_TIM13_Init+0x40>)
 8000974:	f245 72e4 	movw	r2, #22500	@ 0x57e4
 8000978:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_TIM13_Init+0x40>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 100;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_TIM13_Init+0x40>)
 8000982:	2264      	movs	r2, #100	@ 0x64
 8000984:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_TIM13_Init+0x40>)
 8000988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800098c:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_TIM13_Init+0x40>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_TIM13_Init+0x40>)
 8000996:	f001 fc23 	bl	80021e0 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM13_Init+0x3c>
	{
		Error_Handler();
 80009a0:	f000 f8c2 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000148 	.word	0x20000148
 80009ac:	40001c00 	.word	0x40001c00

080009b0 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_TIM14_Init+0x40>)
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <MX_TIM14_Init+0x44>)
 80009b8:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 89;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_TIM14_Init+0x40>)
 80009bc:	2259      	movs	r2, #89	@ 0x59
 80009be:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_TIM14_Init+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_TIM14_Init+0x40>)
 80009c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009cc:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_TIM14_Init+0x40>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_TIM14_Init+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_TIM14_Init+0x40>)
 80009dc:	f001 fc00 	bl	80021e0 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM14_Init+0x3a>
	{
		Error_Handler();
 80009e6:	f000 f89f 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000190 	.word	0x20000190
 80009f4:	40002000 	.word	0x40002000

080009f8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f002 fb9e 	bl	8003170 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000a3a:	f000 f875 	bl	8000b28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200001d8 	.word	0x200001d8
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b2a      	ldr	r3, [pc, #168]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a25      	ldr	r2, [pc, #148]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4812      	ldr	r0, [pc, #72]	@ (8000b20 <MX_GPIO_Init+0xd4>)
 8000ad8:	f000 fd16 	bl	8001508 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ae6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <MX_GPIO_Init+0xd8>)
 8000af4:	f000 fb74 	bl	80011e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000af8:	2320      	movs	r3, #32
 8000afa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_GPIO_Init+0xd4>)
 8000b10:	f000 fb66 	bl	80011e0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800

08000b28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b72:	2007      	movs	r0, #7
 8000b74:	f000 faf2 	bl	800115c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b94:	d10e      	bne.n	8000bb4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a37      	ldr	r2, [pc, #220]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000bb2:	e05e      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a31      	ldr	r2, [pc, #196]	@ (8000c80 <HAL_TIM_Base_MspInit+0xfc>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d116      	bne.n	8000bec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	201e      	movs	r0, #30
 8000be0:	f000 fac7 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000be4:	201e      	movs	r0, #30
 8000be6:	f000 fae0 	bl	80011aa <HAL_NVIC_EnableIRQ>
}
 8000bea:	e042      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a24      	ldr	r2, [pc, #144]	@ (8000c84 <HAL_TIM_Base_MspInit+0x100>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10e      	bne.n	8000c14 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
}
 8000c12:	e02e      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <HAL_TIM_Base_MspInit+0x104>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d116      	bne.n	8000c4c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	202c      	movs	r0, #44	@ 0x2c
 8000c40:	f000 fa97 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000c44:	202c      	movs	r0, #44	@ 0x2c
 8000c46:	f000 fab0 	bl	80011aa <HAL_NVIC_EnableIRQ>
}
 8000c4a:	e012      	b.n	8000c72 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM14)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_TIM_Base_MspInit+0x108>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10d      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_TIM_Base_MspInit+0xf8>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40000800 	.word	0x40000800
 8000c84:	40000c00 	.word	0x40000c00
 8000c88:	40001c00 	.word	0x40001c00
 8000c8c:	40002000 	.word	0x40002000

08000c90 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <HAL_TIM_PWM_MspInit+0x3c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10d      	bne.n	8000cbe <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	4a09      	ldr	r2, [pc, #36]	@ (8000cd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <HAL_TIM_PWM_MspInit+0x40>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40000400 	.word	0x40000400
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <HAL_TIM_MspPostInit+0x68>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d11d      	bne.n	8000d32 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_TIM_MspPostInit+0x6c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <HAL_TIM_MspPostInit+0x6c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d12:	2320      	movs	r3, #32
 8000d14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <HAL_TIM_MspPostInit+0x70>)
 8000d2e:	f000 fa57 	bl	80011e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3720      	adds	r7, #32
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12b      	bne.n	8000dc2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_UART_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da2:	230c      	movs	r3, #12
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_UART_MspInit+0x8c>)
 8000dbe:	f000 fa0f 	bl	80011e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 f8a5 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM4_IRQHandler+0x10>)
 8000e3e:	f001 fb75 	bl	800252c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000b8 	.word	0x200000b8

08000e4c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000e52:	f001 fb6b 	bl	800252c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000148 	.word	0x20000148

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ebc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e88:	f7ff ffea 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f002 fc29 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fb77 	bl	80005a8 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec8:	08003790 	.word	0x08003790
  ldr r2, =_sbss
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed0:	2000022c 	.word	0x2000022c

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f92b 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fe12 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f943 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f58:	f000 f90b 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000228 	.word	0x20000228

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000228 	.word	0x20000228

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	@ (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	@ (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	@ (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	@ 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff3e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff31 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e165      	b.n	80014c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 8154 	bne.w	80014c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d005      	beq.n	8001232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	2b02      	cmp	r3, #2
 8001230:	d130      	bne.n	8001294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 0201 	and.w	r2, r3, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b03      	cmp	r3, #3
 800129e:	d017      	beq.n	80012d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80ae 	beq.w	80014c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b5d      	ldr	r3, [pc, #372]	@ (80014e0 <HAL_GPIO_Init+0x300>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a5c      	ldr	r2, [pc, #368]	@ (80014e0 <HAL_GPIO_Init+0x300>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b5a      	ldr	r3, [pc, #360]	@ (80014e0 <HAL_GPIO_Init+0x300>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	4a58      	ldr	r2, [pc, #352]	@ (80014e4 <HAL_GPIO_Init+0x304>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	@ (80014e8 <HAL_GPIO_Init+0x308>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d025      	beq.n	80013fa <HAL_GPIO_Init+0x21a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	@ (80014ec <HAL_GPIO_Init+0x30c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01f      	beq.n	80013f6 <HAL_GPIO_Init+0x216>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	@ (80014f0 <HAL_GPIO_Init+0x310>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d019      	beq.n	80013f2 <HAL_GPIO_Init+0x212>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	@ (80014f4 <HAL_GPIO_Init+0x314>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x20e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	@ (80014f8 <HAL_GPIO_Init+0x318>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x20a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <HAL_GPIO_Init+0x31c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x206>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <HAL_GPIO_Init+0x320>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x202>
 80013de:	2306      	movs	r3, #6
 80013e0:	e00c      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013e2:	2307      	movs	r3, #7
 80013e4:	e00a      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x21c>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	@ (80014e4 <HAL_GPIO_Init+0x304>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b3a      	ldr	r3, [pc, #232]	@ (8001504 <HAL_GPIO_Init+0x324>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a31      	ldr	r2, [pc, #196]	@ (8001504 <HAL_GPIO_Init+0x324>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <HAL_GPIO_Init+0x324>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a26      	ldr	r2, [pc, #152]	@ (8001504 <HAL_GPIO_Init+0x324>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <HAL_GPIO_Init+0x324>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <HAL_GPIO_Init+0x324>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_GPIO_Init+0x324>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <HAL_GPIO_Init+0x324>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f ae96 	bls.w	80011fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40021400 	.word	0x40021400
 8001500:	40021800 	.word	0x40021800
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	041a      	lsls	r2, r3, #16
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43d9      	mvns	r1, r3
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	400b      	ands	r3, r1
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_PWREx_EnableOverDrive+0x90>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a1f      	ldr	r2, [pc, #124]	@ (8001600 <HAL_PWREx_EnableOverDrive+0x90>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_PWREx_EnableOverDrive+0x90>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_PWREx_EnableOverDrive+0x94>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800159c:	f7ff fd02 	bl	8000fa4 <HAL_GetTick>
 80015a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015a2:	e009      	b.n	80015b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015a4:	f7ff fcfe 	bl	8000fa4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015b2:	d901      	bls.n	80015b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e01f      	b.n	80015f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_PWREx_EnableOverDrive+0x98>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c4:	d1ee      	bne.n	80015a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015cc:	f7ff fcea 	bl	8000fa4 <HAL_GetTick>
 80015d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015d2:	e009      	b.n	80015e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015d4:	f7ff fce6 	bl	8000fa4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e2:	d901      	bls.n	80015e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e007      	b.n	80015f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <HAL_PWREx_EnableOverDrive+0x98>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015f4:	d1ee      	bne.n	80015d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	420e0040 	.word	0x420e0040
 8001608:	40007000 	.word	0x40007000
 800160c:	420e0044 	.word	0x420e0044

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0cc      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b68      	ldr	r3, [pc, #416]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d90c      	bls.n	800164c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b65      	ldr	r3, [pc, #404]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b63      	ldr	r3, [pc, #396]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0b8      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001664:	4b59      	ldr	r3, [pc, #356]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a58      	ldr	r2, [pc, #352]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800166e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800167c:	4b53      	ldr	r3, [pc, #332]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a52      	ldr	r2, [pc, #328]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b50      	ldr	r3, [pc, #320]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	494d      	ldr	r1, [pc, #308]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	4313      	orrs	r3, r2
 8001698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d044      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b47      	ldr	r3, [pc, #284]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e07f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e067      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4934      	ldr	r1, [pc, #208]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff fc50 	bl	8000fa4 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff fc4c 	bl	8000fa4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e04f      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20c      	bcs.n	8001758 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e032      	b.n	80017be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4916      	ldr	r1, [pc, #88]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	490e      	ldr	r1, [pc, #56]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001796:	f000 f855 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 800179a:	4602      	mov	r2, r0
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	490a      	ldr	r1, [pc, #40]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	5ccb      	ldrb	r3, [r1, r3]
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fbb0 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	08003768 	.word	0x08003768
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000000 	.word	0x20000000

080017f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017f8:	f7ff fff0 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	0a9b      	lsrs	r3, r3, #10
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	4903      	ldr	r1, [pc, #12]	@ (8001818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	08003778 	.word	0x08003778

0800181c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001820:	f7ff ffdc 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	0b5b      	lsrs	r3, r3, #13
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	4903      	ldr	r1, [pc, #12]	@ (8001840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	08003778 	.word	0x08003778

08001844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001848:	b0ae      	sub	sp, #184	@ 0xb8
 800184a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800186a:	4bcb      	ldr	r3, [pc, #812]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b0c      	cmp	r3, #12
 8001874:	f200 8206 	bhi.w	8001c84 <HAL_RCC_GetSysClockFreq+0x440>
 8001878:	a201      	add	r2, pc, #4	@ (adr r2, 8001880 <HAL_RCC_GetSysClockFreq+0x3c>)
 800187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187e:	bf00      	nop
 8001880:	080018b5 	.word	0x080018b5
 8001884:	08001c85 	.word	0x08001c85
 8001888:	08001c85 	.word	0x08001c85
 800188c:	08001c85 	.word	0x08001c85
 8001890:	080018bd 	.word	0x080018bd
 8001894:	08001c85 	.word	0x08001c85
 8001898:	08001c85 	.word	0x08001c85
 800189c:	08001c85 	.word	0x08001c85
 80018a0:	080018c5 	.word	0x080018c5
 80018a4:	08001c85 	.word	0x08001c85
 80018a8:	08001c85 	.word	0x08001c85
 80018ac:	08001c85 	.word	0x08001c85
 80018b0:	08001ab5 	.word	0x08001ab5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018b4:	4bb9      	ldr	r3, [pc, #740]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x358>)
 80018b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018ba:	e1e7      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018bc:	4bb8      	ldr	r3, [pc, #736]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018c2:	e1e3      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c4:	4bb4      	ldr	r3, [pc, #720]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d071      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018dc:	4bae      	ldr	r3, [pc, #696]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	2200      	movs	r2, #0
 80018e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001902:	4622      	mov	r2, r4
 8001904:	462b      	mov	r3, r5
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001914:	0150      	lsls	r0, r2, #5
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4621      	mov	r1, r4
 800191c:	1a51      	subs	r1, r2, r1
 800191e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001920:	4629      	mov	r1, r5
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	647b      	str	r3, [r7, #68]	@ 0x44
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001934:	4649      	mov	r1, r9
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	4641      	mov	r1, r8
 800193a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193e:	4641      	mov	r1, r8
 8001940:	018a      	lsls	r2, r1, #6
 8001942:	4641      	mov	r1, r8
 8001944:	1a51      	subs	r1, r2, r1
 8001946:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001948:	4649      	mov	r1, r9
 800194a:	eb63 0301 	sbc.w	r3, r3, r1
 800194e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800195c:	4649      	mov	r1, r9
 800195e:	00cb      	lsls	r3, r1, #3
 8001960:	4641      	mov	r1, r8
 8001962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001966:	4641      	mov	r1, r8
 8001968:	00ca      	lsls	r2, r1, #3
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	4603      	mov	r3, r0
 8001970:	4622      	mov	r2, r4
 8001972:	189b      	adds	r3, r3, r2
 8001974:	633b      	str	r3, [r7, #48]	@ 0x30
 8001976:	462b      	mov	r3, r5
 8001978:	460a      	mov	r2, r1
 800197a:	eb42 0303 	adc.w	r3, r2, r3
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800198c:	4629      	mov	r1, r5
 800198e:	024b      	lsls	r3, r1, #9
 8001990:	4621      	mov	r1, r4
 8001992:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001996:	4621      	mov	r1, r4
 8001998:	024a      	lsls	r2, r1, #9
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80019a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80019ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80019b0:	f7fe fc28 	bl	8000204 <__aeabi_uldivmod>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019be:	e067      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c0:	4b75      	ldr	r3, [pc, #468]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	2200      	movs	r2, #0
 80019c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80019d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80019da:	2300      	movs	r3, #0
 80019dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80019e2:	4622      	mov	r2, r4
 80019e4:	462b      	mov	r3, r5
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	0159      	lsls	r1, r3, #5
 80019f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f4:	0150      	lsls	r0, r2, #5
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4621      	mov	r1, r4
 80019fc:	1a51      	subs	r1, r2, r1
 80019fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001a00:	4629      	mov	r1, r5
 8001a02:	eb63 0301 	sbc.w	r3, r3, r1
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001a14:	4649      	mov	r1, r9
 8001a16:	018b      	lsls	r3, r1, #6
 8001a18:	4641      	mov	r1, r8
 8001a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a1e:	4641      	mov	r1, r8
 8001a20:	018a      	lsls	r2, r1, #6
 8001a22:	4641      	mov	r1, r8
 8001a24:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a28:	4649      	mov	r1, r9
 8001a2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a42:	4692      	mov	sl, r2
 8001a44:	469b      	mov	fp, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	eb1a 0303 	adds.w	r3, sl, r3
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	462b      	mov	r3, r5
 8001a50:	eb4b 0303 	adc.w	r3, fp, r3
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a62:	4629      	mov	r1, r5
 8001a64:	028b      	lsls	r3, r1, #10
 8001a66:	4621      	mov	r1, r4
 8001a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	028a      	lsls	r2, r1, #10
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a78:	2200      	movs	r2, #0
 8001a7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a7c:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a82:	f7fe fbbf 	bl	8000204 <__aeabi_uldivmod>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a90:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ab2:	e0eb      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab4:	4b38      	ldr	r3, [pc, #224]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001abc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac0:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d06b      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001acc:	4b32      	ldr	r3, [pc, #200]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ad6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ad8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ade:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ae4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ae8:	4622      	mov	r2, r4
 8001aea:	462b      	mov	r3, r5
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0159      	lsls	r1, r3, #5
 8001af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afa:	0150      	lsls	r0, r2, #5
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4621      	mov	r1, r4
 8001b02:	1a51      	subs	r1, r2, r1
 8001b04:	61b9      	str	r1, [r7, #24]
 8001b06:	4629      	mov	r1, r5
 8001b08:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b1a:	4659      	mov	r1, fp
 8001b1c:	018b      	lsls	r3, r1, #6
 8001b1e:	4651      	mov	r1, sl
 8001b20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b24:	4651      	mov	r1, sl
 8001b26:	018a      	lsls	r2, r1, #6
 8001b28:	4651      	mov	r1, sl
 8001b2a:	ebb2 0801 	subs.w	r8, r2, r1
 8001b2e:	4659      	mov	r1, fp
 8001b30:	eb63 0901 	sbc.w	r9, r3, r1
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b48:	4690      	mov	r8, r2
 8001b4a:	4699      	mov	r9, r3
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	eb18 0303 	adds.w	r3, r8, r3
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	462b      	mov	r3, r5
 8001b56:	eb49 0303 	adc.w	r3, r9, r3
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b68:	4629      	mov	r1, r5
 8001b6a:	024b      	lsls	r3, r1, #9
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b72:	4621      	mov	r1, r4
 8001b74:	024a      	lsls	r2, r1, #9
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b7e:	2200      	movs	r2, #0
 8001b80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b88:	f7fe fb3c 	bl	8000204 <__aeabi_uldivmod>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4613      	mov	r3, r2
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b96:	e065      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x420>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x458>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	2200      	movs	r2, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	4611      	mov	r1, r2
 8001bb0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001bbe:	4642      	mov	r2, r8
 8001bc0:	464b      	mov	r3, r9
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	0159      	lsls	r1, r3, #5
 8001bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd0:	0150      	lsls	r0, r2, #5
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4641      	mov	r1, r8
 8001bd8:	1a51      	subs	r1, r2, r1
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	4649      	mov	r1, r9
 8001bde:	eb63 0301 	sbc.w	r3, r3, r1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	018b      	lsls	r3, r1, #6
 8001bf4:	4651      	mov	r1, sl
 8001bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bfa:	4651      	mov	r1, sl
 8001bfc:	018a      	lsls	r2, r1, #6
 8001bfe:	4651      	mov	r1, sl
 8001c00:	1a54      	subs	r4, r2, r1
 8001c02:	4659      	mov	r1, fp
 8001c04:	eb63 0501 	sbc.w	r5, r3, r1
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	00eb      	lsls	r3, r5, #3
 8001c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c16:	00e2      	lsls	r2, r4, #3
 8001c18:	4614      	mov	r4, r2
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	4643      	mov	r3, r8
 8001c1e:	18e3      	adds	r3, r4, r3
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	464b      	mov	r3, r9
 8001c24:	eb45 0303 	adc.w	r3, r5, r3
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c36:	4629      	mov	r1, r5
 8001c38:	028b      	lsls	r3, r1, #10
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c40:	4621      	mov	r1, r4
 8001c42:	028a      	lsls	r2, r1, #10
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c50:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c56:	f7fe fad5 	bl	8000204 <__aeabi_uldivmod>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4613      	mov	r3, r2
 8001c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x458>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0f1b      	lsrs	r3, r3, #28
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c82:	e003      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	37b8      	adds	r7, #184	@ 0xb8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	00f42400 	.word	0x00f42400

08001ca4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e28d      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8083 	beq.w	8001dca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cc4:	4b94      	ldr	r3, [pc, #592]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d019      	beq.n	8001d04 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cd0:	4b91      	ldr	r3, [pc, #580]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce8:	d00c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b8b      	ldr	r3, [pc, #556]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d112      	bne.n	8001d1c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf6:	4b88      	ldr	r3, [pc, #544]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d02:	d10b      	bne.n	8001d1c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	4b84      	ldr	r3, [pc, #528]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d05b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x124>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d157      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e25a      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d24:	d106      	bne.n	8001d34 <HAL_RCC_OscConfig+0x90>
 8001d26:	4b7c      	ldr	r3, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xcc>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0xb4>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b73      	ldr	r3, [pc, #460]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a72      	ldr	r2, [pc, #456]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xcc>
 8001d58:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6b      	ldr	r2, [pc, #428]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff f914 	bl	8000fa4 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff f910 	bl	8000fa4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e21f      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xdc>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f900 	bl	8000fa4 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f8fc 	bl	8000fa4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	@ 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e20b      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x104>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d06f      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dd6:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d017      	beq.n	8001e12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001de2:	4b4d      	ldr	r3, [pc, #308]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dee:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x186>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1d3      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4937      	ldr	r1, [pc, #220]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f8a9 	bl	8000fa4 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff f8a5 	bl	8000fa4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1b4      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4925      	ldr	r1, [pc, #148]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x278>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f888 	bl	8000fa4 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f884 	bl	8000fa4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e193      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d036      	beq.n	8001f30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f868 	bl	8000fa4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff f864 	bl	8000fa4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e173      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x234>
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efe:	f7ff f851 	bl	8000fa4 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00e      	b.n	8001f24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff f84d 	bl	8000fa4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d907      	bls.n	8001f24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e15c      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470000 	.word	0x42470000
 8001f20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b8a      	ldr	r3, [pc, #552]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ea      	bne.n	8001f06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8097 	beq.w	800206c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b83      	ldr	r3, [pc, #524]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b7f      	ldr	r3, [pc, #508]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a7e      	ldr	r2, [pc, #504]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b79      	ldr	r3, [pc, #484]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff f80d 	bl	8000fa4 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff f809 	bl	8000fa4 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e118      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8002154 <HAL_RCC_OscConfig+0x4b0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x31e>
 8001fb4:	4b66      	ldr	r3, [pc, #408]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a65      	ldr	r2, [pc, #404]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x358>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x340>
 8001fca:	4b61      	ldr	r3, [pc, #388]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a60      	ldr	r2, [pc, #384]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a5d      	ldr	r2, [pc, #372]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x358>
 8001fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a59      	ldr	r2, [pc, #356]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	4b57      	ldr	r3, [pc, #348]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a56      	ldr	r2, [pc, #344]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe ffce 	bl	8000fa4 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe ffca 	bl	8000fa4 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0d7      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCC_OscConfig+0x368>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe ffb8 	bl	8000fa4 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe ffb4 	bl	8000fa4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0c1      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ee      	bne.n	8002038 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a3a      	ldr	r2, [pc, #232]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80ad 	beq.w	80021d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002076:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d060      	beq.n	8002144 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d145      	bne.n	8002116 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_RCC_OscConfig+0x4b4>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe ff88 	bl	8000fa4 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe ff84 	bl	8000fa4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e093      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	071b      	lsls	r3, r3, #28
 80020e2:	491b      	ldr	r1, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x4b4>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe ff59 	bl	8000fa4 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7fe ff55 	bl	8000fa4 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e064      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x452>
 8002114:	e05c      	b.n	80021d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <HAL_RCC_OscConfig+0x4b4>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe ff42 	bl	8000fa4 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe ff3e 	bl	8000fa4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e04d      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_OscConfig+0x4ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x480>
 8002142:	e045      	b.n	80021d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e040      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
 8002150:	40023800 	.word	0x40023800
 8002154:	40007000 	.word	0x40007000
 8002158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800215c:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <HAL_RCC_OscConfig+0x538>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d030      	beq.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d129      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d122      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800218c:	4013      	ands	r3, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002194:	4293      	cmp	r3, r2
 8002196:	d119      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	3b01      	subs	r3, #1
 80021a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10f      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e041      	b.n	8002276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fcbc 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 fc26 	bl	8002a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d001      	beq.n	8002298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e046      	b.n	8002326 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a23      	ldr	r2, [pc, #140]	@ (8002334 <HAL_TIM_Base_Start+0xb4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d022      	beq.n	80022f0 <HAL_TIM_Base_Start+0x70>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b2:	d01d      	beq.n	80022f0 <HAL_TIM_Base_Start+0x70>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002338 <HAL_TIM_Base_Start+0xb8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d018      	beq.n	80022f0 <HAL_TIM_Base_Start+0x70>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1e      	ldr	r2, [pc, #120]	@ (800233c <HAL_TIM_Base_Start+0xbc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d013      	beq.n	80022f0 <HAL_TIM_Base_Start+0x70>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <HAL_TIM_Base_Start+0xc0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00e      	beq.n	80022f0 <HAL_TIM_Base_Start+0x70>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <HAL_TIM_Base_Start+0xc4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_TIM_Base_Start+0x70>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_TIM_Base_Start+0xc8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_TIM_Base_Start+0x70>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a18      	ldr	r2, [pc, #96]	@ (800234c <HAL_TIM_Base_Start+0xcc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d111      	bne.n	8002314 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d010      	beq.n	8002324 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002312:	e007      	b.n	8002324 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40010000 	.word	0x40010000
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800
 8002340:	40000c00 	.word	0x40000c00
 8002344:	40010400 	.word	0x40010400
 8002348:	40014000 	.word	0x40014000
 800234c:	40001800 	.word	0x40001800

08002350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d001      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04e      	b.n	8002406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <HAL_TIM_Base_Start_IT+0xc4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002392:	d01d      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1f      	ldr	r2, [pc, #124]	@ (8002418 <HAL_TIM_Base_Start_IT+0xc8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1e      	ldr	r2, [pc, #120]	@ (800241c <HAL_TIM_Base_Start_IT+0xcc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002420 <HAL_TIM_Base_Start_IT+0xd0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002424 <HAL_TIM_Base_Start_IT+0xd4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <HAL_TIM_Base_Start_IT+0xd8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a18      	ldr	r2, [pc, #96]	@ (800242c <HAL_TIM_Base_Start_IT+0xdc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d111      	bne.n	80023f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d010      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f2:	e007      	b.n	8002404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40010000 	.word	0x40010000
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800
 8002420:	40000c00 	.word	0x40000c00
 8002424:	40010400 	.word	0x40010400
 8002428:	40014000 	.word	0x40014000
 800242c:	40001800 	.word	0x40001800

08002430 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <HAL_TIM_Base_Stop_IT+0x48>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_TIM_Base_Stop_IT+0x48>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e041      	b.n	8002524 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7fe fbeb 	bl	8000c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f000 facf 	bl	8002a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d020      	beq.n	8002590 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01b      	beq.n	8002590 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0202 	mvn.w	r2, #2
 8002560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa5b 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa4d 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fa5e 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d020      	beq.n	80025dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01b      	beq.n	80025dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0204 	mvn.w	r2, #4
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa35 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fa27 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fa38 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d020      	beq.n	8002628 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0208 	mvn.w	r2, #8
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2204      	movs	r2, #4
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa0f 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa01 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fa12 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d020      	beq.n	8002674 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01b      	beq.n	8002674 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0210 	mvn.w	r2, #16
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2208      	movs	r2, #8
 800264a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f9e9 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f9db 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f9ec 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0201 	mvn.w	r2, #1
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fd ff4c 	bl	8000530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fd50 	bl	800315c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f9bd 	bl	8002a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00c      	beq.n	8002704 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0220 	mvn.w	r2, #32
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fd22 	bl	8003148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002726:	2302      	movs	r3, #2
 8002728:	e0ae      	b.n	8002888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	f200 809f 	bhi.w	8002878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800273a:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002775 	.word	0x08002775
 8002744:	08002879 	.word	0x08002879
 8002748:	08002879 	.word	0x08002879
 800274c:	08002879 	.word	0x08002879
 8002750:	080027b5 	.word	0x080027b5
 8002754:	08002879 	.word	0x08002879
 8002758:	08002879 	.word	0x08002879
 800275c:	08002879 	.word	0x08002879
 8002760:	080027f7 	.word	0x080027f7
 8002764:	08002879 	.word	0x08002879
 8002768:	08002879 	.word	0x08002879
 800276c:	08002879 	.word	0x08002879
 8002770:	08002837 	.word	0x08002837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fa1e 	bl	8002bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0208 	orr.w	r2, r2, #8
 800278e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6999      	ldr	r1, [r3, #24]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	619a      	str	r2, [r3, #24]
      break;
 80027b2:	e064      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fa6e 	bl	8002c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6999      	ldr	r1, [r3, #24]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	021a      	lsls	r2, r3, #8
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	619a      	str	r2, [r3, #24]
      break;
 80027f4:	e043      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fac3 	bl	8002d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0208 	orr.w	r2, r2, #8
 8002810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0204 	bic.w	r2, r2, #4
 8002820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69d9      	ldr	r1, [r3, #28]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	61da      	str	r2, [r3, #28]
      break;
 8002834:	e023      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fb17 	bl	8002e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69d9      	ldr	r1, [r3, #28]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	61da      	str	r2, [r3, #28]
      break;
 8002876:	e002      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	75fb      	strb	r3, [r7, #23]
      break;
 800287c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_TIM_ConfigClockSource+0x1c>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0b4      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x186>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e4:	d03e      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0xd4>
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028ea:	f200 8087 	bhi.w	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f2:	f000 8086 	beq.w	8002a02 <HAL_TIM_ConfigClockSource+0x172>
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028fa:	d87f      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b70      	cmp	r3, #112	@ 0x70
 80028fe:	d01a      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0xa6>
 8002900:	2b70      	cmp	r3, #112	@ 0x70
 8002902:	d87b      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b60      	cmp	r3, #96	@ 0x60
 8002906:	d050      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x11a>
 8002908:	2b60      	cmp	r3, #96	@ 0x60
 800290a:	d877      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b50      	cmp	r3, #80	@ 0x50
 800290e:	d03c      	beq.n	800298a <HAL_TIM_ConfigClockSource+0xfa>
 8002910:	2b50      	cmp	r3, #80	@ 0x50
 8002912:	d873      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b40      	cmp	r3, #64	@ 0x40
 8002916:	d058      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x13a>
 8002918:	2b40      	cmp	r3, #64	@ 0x40
 800291a:	d86f      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b30      	cmp	r3, #48	@ 0x30
 800291e:	d064      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	2b30      	cmp	r3, #48	@ 0x30
 8002922:	d86b      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b20      	cmp	r3, #32
 8002926:	d060      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d867      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05c      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002930:	2b10      	cmp	r3, #16
 8002932:	d05a      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	e062      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002946:	f000 fb63 	bl	8003010 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	609a      	str	r2, [r3, #8]
      break;
 8002962:	e04f      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002974:	f000 fb4c 	bl	8003010 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002986:	609a      	str	r2, [r3, #8]
      break;
 8002988:	e03c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002996:	461a      	mov	r2, r3
 8002998:	f000 fac0 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2150      	movs	r1, #80	@ 0x50
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fb19 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 80029a8:	e02c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b6:	461a      	mov	r2, r3
 80029b8:	f000 fadf 	bl	8002f7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2160      	movs	r1, #96	@ 0x60
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fb09 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 80029c8:	e01c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	461a      	mov	r2, r3
 80029d8:	f000 faa0 	bl	8002f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2140      	movs	r1, #64	@ 0x40
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 faf9 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 80029e8:	e00c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f000 faf0 	bl	8002fda <TIM_ITRx_SetConfig>
      break;
 80029fa:	e003      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002a00:	e000      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a43      	ldr	r2, [pc, #268]	@ (8002b90 <TIM_Base_SetConfig+0x120>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8e:	d00f      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a40      	ldr	r2, [pc, #256]	@ (8002b94 <TIM_Base_SetConfig+0x124>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b98 <TIM_Base_SetConfig+0x128>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d007      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3d      	ldr	r2, [pc, #244]	@ (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d108      	bne.n	8002ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a32      	ldr	r2, [pc, #200]	@ (8002b90 <TIM_Base_SetConfig+0x120>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad0:	d027      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8002b94 <TIM_Base_SetConfig+0x124>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d023      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	@ (8002b98 <TIM_Base_SetConfig+0x128>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d017      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba4 <TIM_Base_SetConfig+0x134>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba8 <TIM_Base_SetConfig+0x138>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a29      	ldr	r2, [pc, #164]	@ (8002bac <TIM_Base_SetConfig+0x13c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a28      	ldr	r2, [pc, #160]	@ (8002bb0 <TIM_Base_SetConfig+0x140>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a27      	ldr	r2, [pc, #156]	@ (8002bb4 <TIM_Base_SetConfig+0x144>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a26      	ldr	r2, [pc, #152]	@ (8002bb8 <TIM_Base_SetConfig+0x148>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d108      	bne.n	8002b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a0e      	ldr	r2, [pc, #56]	@ (8002b90 <TIM_Base_SetConfig+0x120>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0xf2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a10      	ldr	r2, [pc, #64]	@ (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d103      	bne.n	8002b6a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f043 0204 	orr.w	r2, r3, #4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40010400 	.word	0x40010400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800
 8002bb0:	40001800 	.word	0x40001800
 8002bb4:	40001c00 	.word	0x40001c00
 8002bb8:	40002000 	.word	0x40002000

08002bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f023 0201 	bic.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 0302 	bic.w	r3, r3, #2
 8002c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <TIM_OC1_SetConfig+0xd8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_OC1_SetConfig+0x64>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <TIM_OC1_SetConfig+0xdc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10c      	bne.n	8002c3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0308 	bic.w	r3, r3, #8
 8002c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	@ (8002c94 <TIM_OC1_SetConfig+0xd8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_OC1_SetConfig+0x8e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a14      	ldr	r2, [pc, #80]	@ (8002c98 <TIM_OC1_SetConfig+0xdc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d111      	bne.n	8002c6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40010000 	.word	0x40010000
 8002c98:	40010400 	.word	0x40010400

08002c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f023 0210 	bic.w	r2, r3, #16
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0320 	bic.w	r3, r3, #32
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <TIM_OC2_SetConfig+0xe4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_OC2_SetConfig+0x68>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <TIM_OC2_SetConfig+0xe8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10d      	bne.n	8002d20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <TIM_OC2_SetConfig+0xe4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_OC2_SetConfig+0x94>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	@ (8002d84 <TIM_OC2_SetConfig+0xe8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d113      	bne.n	8002d58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40010400 	.word	0x40010400

08002d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a21      	ldr	r2, [pc, #132]	@ (8002e68 <TIM_OC3_SetConfig+0xe0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_OC3_SetConfig+0x66>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a20      	ldr	r2, [pc, #128]	@ (8002e6c <TIM_OC3_SetConfig+0xe4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10d      	bne.n	8002e0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	@ (8002e68 <TIM_OC3_SetConfig+0xe0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_OC3_SetConfig+0x92>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a15      	ldr	r2, [pc, #84]	@ (8002e6c <TIM_OC3_SetConfig+0xe4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d113      	bne.n	8002e42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40010000 	.word	0x40010000
 8002e6c:	40010400 	.word	0x40010400

08002e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	031b      	lsls	r3, r3, #12
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <TIM_OC4_SetConfig+0xa4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_OC4_SetConfig+0x68>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <TIM_OC4_SetConfig+0xa8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d109      	bne.n	8002eec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010400 	.word	0x40010400

08002f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 030a 	bic.w	r3, r3, #10
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f023 0210 	bic.w	r2, r3, #16
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	031b      	lsls	r3, r3, #12
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f043 0307 	orr.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800302a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	021a      	lsls	r2, r3, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	431a      	orrs	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003064:	2302      	movs	r3, #2
 8003066:	e05a      	b.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a21      	ldr	r2, [pc, #132]	@ (800312c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b4:	d01d      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a18      	ldr	r2, [pc, #96]	@ (800313c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a17      	ldr	r2, [pc, #92]	@ (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	4313      	orrs	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800
 8003138:	40000c00 	.word	0x40000c00
 800313c:	40010400 	.word	0x40010400
 8003140:	40014000 	.word	0x40014000
 8003144:	40001800 	.word	0x40001800

08003148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e042      	b.n	8003208 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fdd6 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f82b 	bl	8003210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b0c0      	sub	sp, #256	@ 0x100
 8003216:	af00      	add	r7, sp, #0
 8003218:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	ea40 0301 	orr.w	r3, r0, r1
 8003238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	431a      	orrs	r2, r3
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003268:	f021 010c 	bic.w	r1, r1, #12
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003276:	430b      	orrs	r3, r1
 8003278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328a:	6999      	ldr	r1, [r3, #24]
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	ea40 0301 	orr.w	r3, r0, r1
 8003296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b8f      	ldr	r3, [pc, #572]	@ (80034dc <UART_SetConfig+0x2cc>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d005      	beq.n	80032b0 <UART_SetConfig+0xa0>
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b8d      	ldr	r3, [pc, #564]	@ (80034e0 <UART_SetConfig+0x2d0>)
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d104      	bne.n	80032ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7fe fab4 	bl	800181c <HAL_RCC_GetPCLK2Freq>
 80032b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032b8:	e003      	b.n	80032c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ba:	f7fe fa9b 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 80032be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032cc:	f040 810c 	bne.w	80034e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032ea:	415b      	adcs	r3, r3
 80032ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032f2:	4621      	mov	r1, r4
 80032f4:	eb12 0801 	adds.w	r8, r2, r1
 80032f8:	4629      	mov	r1, r5
 80032fa:	eb43 0901 	adc.w	r9, r3, r1
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800330a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003312:	4690      	mov	r8, r2
 8003314:	4699      	mov	r9, r3
 8003316:	4623      	mov	r3, r4
 8003318:	eb18 0303 	adds.w	r3, r8, r3
 800331c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003320:	462b      	mov	r3, r5
 8003322:	eb49 0303 	adc.w	r3, r9, r3
 8003326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003336:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800333a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800333e:	460b      	mov	r3, r1
 8003340:	18db      	adds	r3, r3, r3
 8003342:	653b      	str	r3, [r7, #80]	@ 0x50
 8003344:	4613      	mov	r3, r2
 8003346:	eb42 0303 	adc.w	r3, r2, r3
 800334a:	657b      	str	r3, [r7, #84]	@ 0x54
 800334c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003354:	f7fc ff56 	bl	8000204 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4b61      	ldr	r3, [pc, #388]	@ (80034e4 <UART_SetConfig+0x2d4>)
 800335e:	fba3 2302 	umull	r2, r3, r3, r2
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	011c      	lsls	r4, r3, #4
 8003366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003370:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	1891      	adds	r1, r2, r2
 800337e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003380:	415b      	adcs	r3, r3
 8003382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003388:	4641      	mov	r1, r8
 800338a:	eb12 0a01 	adds.w	sl, r2, r1
 800338e:	4649      	mov	r1, r9
 8003390:	eb43 0b01 	adc.w	fp, r3, r1
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a8:	4692      	mov	sl, r2
 80033aa:	469b      	mov	fp, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	eb1a 0303 	adds.w	r3, sl, r3
 80033b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033b6:	464b      	mov	r3, r9
 80033b8:	eb4b 0303 	adc.w	r3, fp, r3
 80033bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033d4:	460b      	mov	r3, r1
 80033d6:	18db      	adds	r3, r3, r3
 80033d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80033da:	4613      	mov	r3, r2
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033ea:	f7fc ff0b 	bl	8000204 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <UART_SetConfig+0x2d4>)
 80033f6:	fba3 2301 	umull	r2, r3, r3, r1
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2264      	movs	r2, #100	@ 0x64
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	1acb      	subs	r3, r1, r3
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800340a:	4b36      	ldr	r3, [pc, #216]	@ (80034e4 <UART_SetConfig+0x2d4>)
 800340c:	fba3 2302 	umull	r2, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003418:	441c      	add	r4, r3
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003424:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003434:	415b      	adcs	r3, r3
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800343c:	4641      	mov	r1, r8
 800343e:	1851      	adds	r1, r2, r1
 8003440:	6339      	str	r1, [r7, #48]	@ 0x30
 8003442:	4649      	mov	r1, r9
 8003444:	414b      	adcs	r3, r1
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003454:	4659      	mov	r1, fp
 8003456:	00cb      	lsls	r3, r1, #3
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345e:	4651      	mov	r1, sl
 8003460:	00ca      	lsls	r2, r1, #3
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	4603      	mov	r3, r0
 8003468:	4642      	mov	r2, r8
 800346a:	189b      	adds	r3, r3, r2
 800346c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003470:	464b      	mov	r3, r9
 8003472:	460a      	mov	r2, r1
 8003474:	eb42 0303 	adc.w	r3, r2, r3
 8003478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003488:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800348c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003490:	460b      	mov	r3, r1
 8003492:	18db      	adds	r3, r3, r3
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003496:	4613      	mov	r3, r2
 8003498:	eb42 0303 	adc.w	r3, r2, r3
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800349e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034a6:	f7fc fead 	bl	8000204 <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <UART_SetConfig+0x2d4>)
 80034b0:	fba3 1302 	umull	r1, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	2164      	movs	r1, #100	@ 0x64
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	3332      	adds	r3, #50	@ 0x32
 80034c2:	4a08      	ldr	r2, [pc, #32]	@ (80034e4 <UART_SetConfig+0x2d4>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	f003 0207 	and.w	r2, r3, #7
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4422      	add	r2, r4
 80034d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034d8:	e106      	b.n	80036e8 <UART_SetConfig+0x4d8>
 80034da:	bf00      	nop
 80034dc:	40011000 	.word	0x40011000
 80034e0:	40011400 	.word	0x40011400
 80034e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034fa:	4642      	mov	r2, r8
 80034fc:	464b      	mov	r3, r9
 80034fe:	1891      	adds	r1, r2, r2
 8003500:	6239      	str	r1, [r7, #32]
 8003502:	415b      	adcs	r3, r3
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
 8003506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800350a:	4641      	mov	r1, r8
 800350c:	1854      	adds	r4, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb43 0501 	adc.w	r5, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	00eb      	lsls	r3, r5, #3
 800351e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003522:	00e2      	lsls	r2, r4, #3
 8003524:	4614      	mov	r4, r2
 8003526:	461d      	mov	r5, r3
 8003528:	4643      	mov	r3, r8
 800352a:	18e3      	adds	r3, r4, r3
 800352c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003530:	464b      	mov	r3, r9
 8003532:	eb45 0303 	adc.w	r3, r5, r3
 8003536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003546:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003556:	4629      	mov	r1, r5
 8003558:	008b      	lsls	r3, r1, #2
 800355a:	4621      	mov	r1, r4
 800355c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003560:	4621      	mov	r1, r4
 8003562:	008a      	lsls	r2, r1, #2
 8003564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003568:	f7fc fe4c 	bl	8000204 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b60      	ldr	r3, [pc, #384]	@ (80036f4 <UART_SetConfig+0x4e4>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011c      	lsls	r4, r3, #4
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	61b9      	str	r1, [r7, #24]
 8003594:	415b      	adcs	r3, r3
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6139      	str	r1, [r7, #16]
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035f4:	4649      	mov	r1, r9
 80035f6:	008b      	lsls	r3, r1, #2
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fe:	4641      	mov	r1, r8
 8003600:	008a      	lsls	r2, r1, #2
 8003602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003606:	f7fc fdfd 	bl	8000204 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4611      	mov	r1, r2
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <UART_SetConfig+0x4e4>)
 8003612:	fba3 2301 	umull	r2, r3, r3, r1
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2264      	movs	r2, #100	@ 0x64
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	1acb      	subs	r3, r1, r3
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	3332      	adds	r3, #50	@ 0x32
 8003624:	4a33      	ldr	r2, [pc, #204]	@ (80036f4 <UART_SetConfig+0x4e4>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003630:	441c      	add	r4, r3
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	673b      	str	r3, [r7, #112]	@ 0x70
 800363a:	677a      	str	r2, [r7, #116]	@ 0x74
 800363c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	415b      	adcs	r3, r3
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003682:	464b      	mov	r3, r9
 8003684:	460a      	mov	r2, r1
 8003686:	eb42 0303 	adc.w	r3, r2, r3
 800368a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	663b      	str	r3, [r7, #96]	@ 0x60
 8003696:	667a      	str	r2, [r7, #100]	@ 0x64
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036a4:	4649      	mov	r1, r9
 80036a6:	008b      	lsls	r3, r1, #2
 80036a8:	4641      	mov	r1, r8
 80036aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ae:	4641      	mov	r1, r8
 80036b0:	008a      	lsls	r2, r1, #2
 80036b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036b6:	f7fc fda5 	bl	8000204 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <UART_SetConfig+0x4e4>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	2164      	movs	r1, #100	@ 0x64
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	3332      	adds	r3, #50	@ 0x32
 80036d2:	4a08      	ldr	r2, [pc, #32]	@ (80036f4 <UART_SetConfig+0x4e4>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4422      	add	r2, r4
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	bf00      	nop
 80036ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036ee:	46bd      	mov	sp, r7
 80036f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f4:	51eb851f 	.word	0x51eb851f

080036f8 <memset>:
 80036f8:	4402      	add	r2, r0
 80036fa:	4603      	mov	r3, r0
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d100      	bne.n	8003702 <memset+0xa>
 8003700:	4770      	bx	lr
 8003702:	f803 1b01 	strb.w	r1, [r3], #1
 8003706:	e7f9      	b.n	80036fc <memset+0x4>

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	4d0d      	ldr	r5, [pc, #52]	@ (8003740 <__libc_init_array+0x38>)
 800370c:	4c0d      	ldr	r4, [pc, #52]	@ (8003744 <__libc_init_array+0x3c>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	2600      	movs	r6, #0
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	4d0b      	ldr	r5, [pc, #44]	@ (8003748 <__libc_init_array+0x40>)
 800371a:	4c0c      	ldr	r4, [pc, #48]	@ (800374c <__libc_init_array+0x44>)
 800371c:	f000 f818 	bl	8003750 <_init>
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	2600      	movs	r6, #0
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	f855 3b04 	ldr.w	r3, [r5], #4
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	08003788 	.word	0x08003788
 8003744:	08003788 	.word	0x08003788
 8003748:	08003788 	.word	0x08003788
 800374c:	0800378c 	.word	0x0800378c

08003750 <_init>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr

0800375c <_fini>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr
