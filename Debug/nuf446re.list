
nuf446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033fc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080035c0  080035c0  000045c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080035d8  080035d8  000045d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e0  080035e0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000045e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035e4  080035e4  000045e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080035e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  080035f4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080035f4  000051dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4a5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4d  00000000  00000000  000124e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00014230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e4  00000000  00000000  00014ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021187  00000000  00000000  000158ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3e1  00000000  00000000  00036a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd305  00000000  00000000  00044e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  0011215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00115664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080035a8 	.word	0x080035a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080035a8 	.word	0x080035a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000538:	2120      	movs	r1, #32
 800053a:	4803      	ldr	r0, [pc, #12]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800053c:	f000 ff57 	bl	80013ee <HAL_GPIO_TogglePin>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40020000 	.word	0x40020000

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fc1c 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f824 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f9fa 	bl	8000950 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f9ce 	bl	80008fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000560:	f000 f890 	bl	8000684 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000564:	f000 f8da 	bl	800071c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000568:	f000 f932 	bl	80007d0 <MX_TIM5_Init>
  MX_TIM13_Init();
 800056c:	f000 f97e 	bl	800086c <MX_TIM13_Init>
  MX_TIM14_Init();
 8000570:	f000 f9a0 	bl	80008b4 <MX_TIM14_Init>
   * TIM13:	General		APB1(90MHz)		16bit	Prescaled to 1kHz. 1cyele = 1ms.
   * TIM14:	General		APB1(90MHz)		16bit	Prescaled to 1MHz. 1cyele = 1us.
   *
   */

  HAL_TIM_Base_Start_IT(&htim13);				// TIM13スタート
 8000574:	4808      	ldr	r0, [pc, #32]	@ (8000598 <main+0x4c>)
 8000576:	f001 fe45 	bl	8002204 <HAL_TIM_Base_Start_IT>

  // これで1usウェイトになる
  HAL_TIM_Base_Start(&htim14);					// TIM14スタート
 800057a:	4808      	ldr	r0, [pc, #32]	@ (800059c <main+0x50>)
 800057c:	f001 fdda 	bl	8002134 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim14, 0);			// TIM14カウンタに0をセット
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <main+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim14) < 1);	// TIM14カウンタが1未満のときループ
 8000588:	bf00      	nop
 800058a:	4b04      	ldr	r3, [pc, #16]	@ (800059c <main+0x50>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0fa      	beq.n	800058a <main+0x3e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x48>
 8000598:	20000100 	.word	0x20000100
 800059c:	20000148 	.word	0x20000148

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	2234      	movs	r2, #52	@ 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 ffce 	bl	8003550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <SystemClock_Config+0xdc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <SystemClock_Config+0xdc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b29      	ldr	r3, [pc, #164]	@ (800067c <SystemClock_Config+0xdc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <SystemClock_Config+0xe0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a25      	ldr	r2, [pc, #148]	@ (8000680 <SystemClock_Config+0xe0>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <SystemClock_Config+0xe0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000604:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000614:	23b4      	movs	r3, #180	@ 0xb4
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fa95 	bl	8001b58 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000634:	f000 f9fa 	bl	8000a2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000638:	f000 fef4 	bl	8001424 <HAL_PWREx_EnableOverDrive>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000642:	f000 f9f3 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000652:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f000 ff2d 	bl	80014c4 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000670:	f000 f9dc 	bl	8000a2c <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	@ 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c8:	4813      	ldr	r0, [pc, #76]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006ca:	f001 fce3 	bl	8002094 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006d4:	f000 f9aa 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <MX_TIM2_Init+0x94>)
 80006e6:	f001 ffff 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 f99c 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_TIM2_Init+0x94>)
 8000702:	f002 fbd1 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800070c:	f000 f98e 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000028 	.word	0x20000028

0800071c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800073e:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <MX_TIM3_Init+0xac>)
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <MX_TIM3_Init+0xb0>)
 8000742:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000744:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <MX_TIM3_Init+0xac>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_TIM3_Init+0xac>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_TIM3_Init+0xac>)
 8000752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000756:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_TIM3_Init+0xac>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_TIM3_Init+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000764:	4818      	ldr	r0, [pc, #96]	@ (80007c8 <MX_TIM3_Init+0xac>)
 8000766:	f001 fdbd 	bl	80022e4 <HAL_TIM_PWM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000770:	f000 f95c 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4619      	mov	r1, r3
 8000782:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <MX_TIM3_Init+0xac>)
 8000784:	f002 fb90 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800078e:	f000 f94d 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000792:	2360      	movs	r3, #96	@ 0x60
 8000794:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2204      	movs	r2, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <MX_TIM3_Init+0xac>)
 80007aa:	f001 fedb 	bl	8002564 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80007b4:	f000 f93a 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <MX_TIM3_Init+0xac>)
 80007ba:	f000 f9ef 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	@ 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000070 	.word	0x20000070
 80007cc:	40000400 	.word	0x40000400

080007d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_TIM5_Init+0x94>)
 80007ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000868 <MX_TIM5_Init+0x98>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_TIM5_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_TIM5_Init+0x94>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <MX_TIM5_Init+0x94>)
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000804:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_TIM5_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_TIM5_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000812:	4814      	ldr	r0, [pc, #80]	@ (8000864 <MX_TIM5_Init+0x94>)
 8000814:	f001 fc3e 	bl	8002094 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f905 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4619      	mov	r1, r3
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <MX_TIM5_Init+0x94>)
 8000830:	f001 ff5a 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 f8f7 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <MX_TIM5_Init+0x94>)
 800084c:	f002 fb2c 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000856:	f000 f8e9 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000b8 	.word	0x200000b8
 8000868:	40000c00 	.word	0x40000c00

0800086c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_TIM13_Init+0x40>)
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <MX_TIM13_Init+0x44>)
 8000874:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 22500;
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <MX_TIM13_Init+0x40>)
 8000878:	f245 72e4 	movw	r2, #22500	@ 0x57e4
 800087c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_TIM13_Init+0x40>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_TIM13_Init+0x40>)
 8000886:	2264      	movs	r2, #100	@ 0x64
 8000888:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_TIM13_Init+0x40>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_TIM13_Init+0x40>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_TIM13_Init+0x40>)
 800089a:	f001 fbfb 	bl	8002094 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80008a4:	f000 f8c2 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000100 	.word	0x20000100
 80008b0:	40001c00 	.word	0x40001c00

080008b4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_TIM14_Init+0x40>)
 80008ba:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <MX_TIM14_Init+0x44>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 89;
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_TIM14_Init+0x40>)
 80008c0:	2259      	movs	r2, #89	@ 0x59
 80008c2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_TIM14_Init+0x40>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_TIM14_Init+0x40>)
 80008cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008d0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_TIM14_Init+0x40>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_TIM14_Init+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_TIM14_Init+0x40>)
 80008e0:	f001 fbd8 	bl	8002094 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80008ea:	f000 f89f 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000148 	.word	0x20000148
 80008f8:	40002000 	.word	0x40002000

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f002 fb48 	bl	8002fc8 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f875 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000190 	.word	0x20000190
 800094c:	40004400 	.word	0x40004400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a25      	ldr	r2, [pc, #148]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	4812      	ldr	r0, [pc, #72]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 80009dc:	f000 fcee 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_GPIO_Init+0xd8>)
 80009f8:	f000 fb4c 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fc:	2320      	movs	r3, #32
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_GPIO_Init+0xd4>)
 8000a14:	f000 fb3e 	bl	8001094 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020800 	.word	0x40020800

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 faca 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a98:	d10e      	bne.n	8000ab8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a29      	ldr	r2, [pc, #164]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ab6:	e042      	b.n	8000b3e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a23      	ldr	r2, [pc, #140]	@ (8000b4c <HAL_TIM_Base_MspInit+0xc4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10e      	bne.n	8000ae0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a1f      	ldr	r2, [pc, #124]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
}
 8000ade:	e02e      	b.n	8000b3e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM13)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <HAL_TIM_Base_MspInit+0xc8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d116      	bne.n	8000b18 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a15      	ldr	r2, [pc, #84]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	202c      	movs	r0, #44	@ 0x2c
 8000b0c:	f000 fa8b 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000b10:	202c      	movs	r0, #44	@ 0x2c
 8000b12:	f000 faa4 	bl	800105e <HAL_NVIC_EnableIRQ>
}
 8000b16:	e012      	b.n	8000b3e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM14)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b54 <HAL_TIM_Base_MspInit+0xcc>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10d      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_TIM_Base_MspInit+0xc0>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40000c00 	.word	0x40000c00
 8000b50:	40001c00 	.word	0x40001c00
 8000b54:	40002000 	.word	0x40002000

08000b58 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d10d      	bne.n	8000b86 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_TIM_PWM_MspInit+0x40>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a09      	ldr	r2, [pc, #36]	@ (8000b98 <HAL_TIM_PWM_MspInit+0x40>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <HAL_TIM_PWM_MspInit+0x40>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40000400 	.word	0x40000400
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <HAL_TIM_MspPostInit+0x68>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d11d      	bne.n	8000bfa <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_TIM_MspPostInit+0x6c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	@ (8000c08 <HAL_TIM_MspPostInit+0x6c>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_TIM_MspPostInit+0x6c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <HAL_TIM_MspPostInit+0x70>)
 8000bf6:	f000 fa4d 	bl	8001094 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020400 	.word	0x40020400

08000c10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	@ (8000c94 <HAL_UART_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <HAL_UART_MspInit+0x88>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	@ (8000c98 <HAL_UART_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <HAL_UART_MspInit+0x8c>)
 8000c86:	f000 fa05 	bl	8001094 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	@ 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf6:	f000 f89b 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000d06:	f001 fb3c 	bl	8002382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000100 	.word	0x20000100

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 fbfb 	bl	8003560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fbef 	bl	800054c <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d7c:	080035e8 	.word	0x080035e8
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d84:	200001dc 	.word	0x200001dc

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f92b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe3a 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f943 	bl	800107a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e0c:	f000 f90b 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200001d8 	.word	0x200001d8

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200001d8 	.word	0x200001d8

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	@ (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	@ (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	@ 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e165      	b.n	800137c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8154 	bne.w	8001376 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80ae 	beq.w	8001376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <HAL_GPIO_Init+0x300>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4a5c      	ldr	r2, [pc, #368]	@ (8001394 <HAL_GPIO_Init+0x300>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001228:	6453      	str	r3, [r2, #68]	@ 0x44
 800122a:	4b5a      	ldr	r3, [pc, #360]	@ (8001394 <HAL_GPIO_Init+0x300>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a58      	ldr	r2, [pc, #352]	@ (8001398 <HAL_GPIO_Init+0x304>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	@ (800139c <HAL_GPIO_Init+0x308>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d025      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4e      	ldr	r2, [pc, #312]	@ (80013a0 <HAL_GPIO_Init+0x30c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01f      	beq.n	80012aa <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4d      	ldr	r2, [pc, #308]	@ (80013a4 <HAL_GPIO_Init+0x310>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4c      	ldr	r2, [pc, #304]	@ (80013a8 <HAL_GPIO_Init+0x314>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4b      	ldr	r2, [pc, #300]	@ (80013ac <HAL_GPIO_Init+0x318>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x20a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4a      	ldr	r2, [pc, #296]	@ (80013b0 <HAL_GPIO_Init+0x31c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x206>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a49      	ldr	r2, [pc, #292]	@ (80013b4 <HAL_GPIO_Init+0x320>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x202>
 8001292:	2306      	movs	r3, #6
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 8001296:	2307      	movs	r3, #7
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x21c>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <HAL_GPIO_Init+0x304>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3a      	ldr	r3, [pc, #232]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a31      	ldr	r2, [pc, #196]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a26      	ldr	r2, [pc, #152]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a11      	ldr	r2, [pc, #68]	@ (80013b8 <HAL_GPIO_Init+0x324>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae96 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d8:	e003      	b.n	80013e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001400:	887a      	ldrh	r2, [r7, #2]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43d9      	mvns	r1, r3
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	400b      	ands	r3, r1
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	@ 0x40
 800143e:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff fd02 	bl	8000e58 <HAL_GetTick>
 8001454:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001456:	e009      	b.n	800146c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001458:	f7ff fcfe 	bl	8000e58 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001466:	d901      	bls.n	800146c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e01f      	b.n	80014ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_PWREx_EnableOverDrive+0x98>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001478:	d1ee      	bne.n	8001458 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001480:	f7ff fcea 	bl	8000e58 <HAL_GetTick>
 8001484:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001486:	e009      	b.n	800149c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001488:	f7ff fce6 	bl	8000e58 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001496:	d901      	bls.n	800149c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e007      	b.n	80014ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <HAL_PWREx_EnableOverDrive+0x98>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80014a8:	d1ee      	bne.n	8001488 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	420e0040 	.word	0x420e0040
 80014bc:	40007000 	.word	0x40007000
 80014c0:	420e0044 	.word	0x420e0044

080014c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0cc      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d90c      	bls.n	8001500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b65      	ldr	r3, [pc, #404]	@ (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	4b63      	ldr	r3, [pc, #396]	@ (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0b8      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001518:	4b59      	ldr	r3, [pc, #356]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a58      	ldr	r2, [pc, #352]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800153a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153c:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	494d      	ldr	r1, [pc, #308]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d044      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b47      	ldr	r3, [pc, #284]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d119      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e07f      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d003      	beq.n	8001582 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	2b03      	cmp	r3, #3
 8001580:	d107      	bne.n	8001592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e06f      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e067      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a2:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f023 0203 	bic.w	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4934      	ldr	r1, [pc, #208]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b4:	f7ff fc50 	bl	8000e58 <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015bc:	f7ff fc4c 	bl	8000e58 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e04f      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 020c 	and.w	r2, r3, #12
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d1eb      	bne.n	80015bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d20c      	bcs.n	800160c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b22      	ldr	r3, [pc, #136]	@ (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e032      	b.n	8001672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4916      	ldr	r1, [pc, #88]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	490e      	ldr	r1, [pc, #56]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800164a:	f000 f855 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 800164e:	4602      	mov	r2, r0
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	490a      	ldr	r1, [pc, #40]	@ (8001684 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	5ccb      	ldrb	r3, [r1, r3]
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	4a09      	ldr	r2, [pc, #36]	@ (8001688 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_RCC_ClockConfig+0x1c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fbb0 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00
 8001680:	40023800 	.word	0x40023800
 8001684:	080035c0 	.word	0x080035c0
 8001688:	20000000 	.word	0x20000000
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000000 	.word	0x20000000

080016a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ac:	f7ff fff0 	bl	8001690 <HAL_RCC_GetHCLKFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	0a9b      	lsrs	r3, r3, #10
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	4903      	ldr	r1, [pc, #12]	@ (80016cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	080035d0 	.word	0x080035d0

080016d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016d4:	f7ff ffdc 	bl	8001690 <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	0b5b      	lsrs	r3, r3, #13
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	@ (80016f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	080035d0 	.word	0x080035d0

080016f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fc:	b0ae      	sub	sp, #184	@ 0xb8
 80016fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171e:	4bcb      	ldr	r3, [pc, #812]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b0c      	cmp	r3, #12
 8001728:	f200 8206 	bhi.w	8001b38 <HAL_RCC_GetSysClockFreq+0x440>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <HAL_RCC_GetSysClockFreq+0x3c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	08001769 	.word	0x08001769
 8001738:	08001b39 	.word	0x08001b39
 800173c:	08001b39 	.word	0x08001b39
 8001740:	08001b39 	.word	0x08001b39
 8001744:	08001771 	.word	0x08001771
 8001748:	08001b39 	.word	0x08001b39
 800174c:	08001b39 	.word	0x08001b39
 8001750:	08001b39 	.word	0x08001b39
 8001754:	08001779 	.word	0x08001779
 8001758:	08001b39 	.word	0x08001b39
 800175c:	08001b39 	.word	0x08001b39
 8001760:	08001b39 	.word	0x08001b39
 8001764:	08001969 	.word	0x08001969
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4bb9      	ldr	r3, [pc, #740]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x358>)
 800176a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800176e:	e1e7      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001770:	4bb8      	ldr	r3, [pc, #736]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001776:	e1e3      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001778:	4bb4      	ldr	r3, [pc, #720]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001784:	4bb1      	ldr	r3, [pc, #708]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d071      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001790:	4bae      	ldr	r3, [pc, #696]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	2200      	movs	r2, #0
 8001798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800179c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80017b6:	4622      	mov	r2, r4
 80017b8:	462b      	mov	r3, r5
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	0159      	lsls	r1, r3, #5
 80017c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c8:	0150      	lsls	r0, r2, #5
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4621      	mov	r1, r4
 80017d0:	1a51      	subs	r1, r2, r1
 80017d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80017d4:	4629      	mov	r1, r5
 80017d6:	eb63 0301 	sbc.w	r3, r3, r1
 80017da:	647b      	str	r3, [r7, #68]	@ 0x44
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80017e8:	4649      	mov	r1, r9
 80017ea:	018b      	lsls	r3, r1, #6
 80017ec:	4641      	mov	r1, r8
 80017ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f2:	4641      	mov	r1, r8
 80017f4:	018a      	lsls	r2, r1, #6
 80017f6:	4641      	mov	r1, r8
 80017f8:	1a51      	subs	r1, r2, r1
 80017fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80017fc:	4649      	mov	r1, r9
 80017fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001810:	4649      	mov	r1, r9
 8001812:	00cb      	lsls	r3, r1, #3
 8001814:	4641      	mov	r1, r8
 8001816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800181a:	4641      	mov	r1, r8
 800181c:	00ca      	lsls	r2, r1, #3
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	4603      	mov	r3, r0
 8001824:	4622      	mov	r2, r4
 8001826:	189b      	adds	r3, r3, r2
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
 800182a:	462b      	mov	r3, r5
 800182c:	460a      	mov	r2, r1
 800182e:	eb42 0303 	adc.w	r3, r2, r3
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001840:	4629      	mov	r1, r5
 8001842:	024b      	lsls	r3, r1, #9
 8001844:	4621      	mov	r1, r4
 8001846:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800184a:	4621      	mov	r1, r4
 800184c:	024a      	lsls	r2, r1, #9
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001856:	2200      	movs	r2, #0
 8001858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800185c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001860:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001864:	f7fe fcce 	bl	8000204 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001872:	e067      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001874:	4b75      	ldr	r3, [pc, #468]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	2200      	movs	r2, #0
 800187c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001880:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001884:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800188c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800188e:	2300      	movs	r3, #0
 8001890:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001892:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001896:	4622      	mov	r2, r4
 8001898:	462b      	mov	r3, r5
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	0159      	lsls	r1, r3, #5
 80018a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a8:	0150      	lsls	r0, r2, #5
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4621      	mov	r1, r4
 80018b0:	1a51      	subs	r1, r2, r1
 80018b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80018b4:	4629      	mov	r1, r5
 80018b6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80018c8:	4649      	mov	r1, r9
 80018ca:	018b      	lsls	r3, r1, #6
 80018cc:	4641      	mov	r1, r8
 80018ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018d2:	4641      	mov	r1, r8
 80018d4:	018a      	lsls	r2, r1, #6
 80018d6:	4641      	mov	r1, r8
 80018d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80018dc:	4649      	mov	r1, r9
 80018de:	eb63 0b01 	sbc.w	fp, r3, r1
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018f6:	4692      	mov	sl, r2
 80018f8:	469b      	mov	fp, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	eb1a 0303 	adds.w	r3, sl, r3
 8001900:	623b      	str	r3, [r7, #32]
 8001902:	462b      	mov	r3, r5
 8001904:	eb4b 0303 	adc.w	r3, fp, r3
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001916:	4629      	mov	r1, r5
 8001918:	028b      	lsls	r3, r1, #10
 800191a:	4621      	mov	r1, r4
 800191c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001920:	4621      	mov	r1, r4
 8001922:	028a      	lsls	r2, r1, #10
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800192c:	2200      	movs	r2, #0
 800192e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001930:	677a      	str	r2, [r7, #116]	@ 0x74
 8001932:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001936:	f7fe fc65 	bl	8000204 <__aeabi_uldivmod>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4613      	mov	r3, r2
 8001940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001944:	4b41      	ldr	r3, [pc, #260]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	3301      	adds	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800195a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001966:	e0eb      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001974:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d06b      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001980:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	2200      	movs	r2, #0
 8001988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800198a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800198c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800198e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001992:	663b      	str	r3, [r7, #96]	@ 0x60
 8001994:	2300      	movs	r3, #0
 8001996:	667b      	str	r3, [r7, #100]	@ 0x64
 8001998:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800199c:	4622      	mov	r2, r4
 800199e:	462b      	mov	r3, r5
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	0159      	lsls	r1, r3, #5
 80019aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ae:	0150      	lsls	r0, r2, #5
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4621      	mov	r1, r4
 80019b6:	1a51      	subs	r1, r2, r1
 80019b8:	61b9      	str	r1, [r7, #24]
 80019ba:	4629      	mov	r1, r5
 80019bc:	eb63 0301 	sbc.w	r3, r3, r1
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019ce:	4659      	mov	r1, fp
 80019d0:	018b      	lsls	r3, r1, #6
 80019d2:	4651      	mov	r1, sl
 80019d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019d8:	4651      	mov	r1, sl
 80019da:	018a      	lsls	r2, r1, #6
 80019dc:	4651      	mov	r1, sl
 80019de:	ebb2 0801 	subs.w	r8, r2, r1
 80019e2:	4659      	mov	r1, fp
 80019e4:	eb63 0901 	sbc.w	r9, r3, r1
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019fc:	4690      	mov	r8, r2
 80019fe:	4699      	mov	r9, r3
 8001a00:	4623      	mov	r3, r4
 8001a02:	eb18 0303 	adds.w	r3, r8, r3
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	462b      	mov	r3, r5
 8001a0a:	eb49 0303 	adc.w	r3, r9, r3
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	024b      	lsls	r3, r1, #9
 8001a20:	4621      	mov	r1, r4
 8001a22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a26:	4621      	mov	r1, r4
 8001a28:	024a      	lsls	r2, r1, #9
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a32:	2200      	movs	r2, #0
 8001a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a3c:	f7fe fbe2 	bl	8000204 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a4a:	e065      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x420>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a58:	4b3d      	ldr	r3, [pc, #244]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	4611      	mov	r1, r2
 8001a64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a68:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001a72:	4642      	mov	r2, r8
 8001a74:	464b      	mov	r3, r9
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	0159      	lsls	r1, r3, #5
 8001a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a84:	0150      	lsls	r0, r2, #5
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	1a51      	subs	r1, r2, r1
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	4649      	mov	r1, r9
 8001a92:	eb63 0301 	sbc.w	r3, r3, r1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001aa4:	4659      	mov	r1, fp
 8001aa6:	018b      	lsls	r3, r1, #6
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aae:	4651      	mov	r1, sl
 8001ab0:	018a      	lsls	r2, r1, #6
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	1a54      	subs	r4, r2, r1
 8001ab6:	4659      	mov	r1, fp
 8001ab8:	eb63 0501 	sbc.w	r5, r3, r1
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00eb      	lsls	r3, r5, #3
 8001ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aca:	00e2      	lsls	r2, r4, #3
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	18e3      	adds	r3, r4, r3
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aea:	4629      	mov	r1, r5
 8001aec:	028b      	lsls	r3, r1, #10
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af4:	4621      	mov	r1, r4
 8001af6:	028a      	lsls	r2, r1, #10
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b00:	2200      	movs	r2, #0
 8001b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b04:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b0a:	f7fe fb7b 	bl	8000204 <__aeabi_uldivmod>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4613      	mov	r3, r2
 8001b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	0f1b      	lsrs	r3, r3, #28
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b36:	e003      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	37b8      	adds	r7, #184	@ 0xb8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	00f42400 	.word	0x00f42400

08001b58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e28d      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8083 	beq.w	8001c7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b78:	4b94      	ldr	r3, [pc, #592]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d019      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b84:	4b91      	ldr	r3, [pc, #580]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b90:	4b8e      	ldr	r3, [pc, #568]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d112      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001baa:	4b88      	ldr	r3, [pc, #544]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b84      	ldr	r3, [pc, #528]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d05b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x124>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d157      	bne.n	8001c7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e25a      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x90>
 8001bda:	4b7c      	ldr	r3, [pc, #496]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7b      	ldr	r2, [pc, #492]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01d      	b.n	8001c24 <HAL_RCC_OscConfig+0xcc>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0xb4>
 8001bf2:	4b76      	ldr	r3, [pc, #472]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a75      	ldr	r2, [pc, #468]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b73      	ldr	r3, [pc, #460]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a72      	ldr	r2, [pc, #456]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0xcc>
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6e      	ldr	r2, [pc, #440]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b6c      	ldr	r3, [pc, #432]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f914 	bl	8000e58 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff f910 	bl	8000e58 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	@ 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e21f      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b61      	ldr	r3, [pc, #388]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0xdc>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f900 	bl	8000e58 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f8fc 	bl	8000e58 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	@ 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e20b      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	4b57      	ldr	r3, [pc, #348]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x104>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d06f      	beq.n	8001d6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c8a:	4b50      	ldr	r3, [pc, #320]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d017      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c96:	4b4d      	ldr	r3, [pc, #308]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cae:	4b47      	ldr	r3, [pc, #284]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cba:	4b44      	ldr	r3, [pc, #272]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d116      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x186>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1d3      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4937      	ldr	r1, [pc, #220]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	e03a      	b.n	8001d6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_RCC_OscConfig+0x278>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff f8a9 	bl	8000e58 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff f8a5 	bl	8000e58 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1b4      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4925      	ldr	r1, [pc, #148]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e015      	b.n	8001d6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <HAL_RCC_OscConfig+0x278>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f888 	bl	8000e58 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f884 	bl	8000e58 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e193      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d036      	beq.n	8001de4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f868 	bl	8000e58 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f864 	bl	8000e58 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e173      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x234>
 8001daa:	e01b      	b.n	8001de4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff f851 	bl	8000e58 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	e00e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dba:	f7ff f84d 	bl	8000e58 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d907      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e15c      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	42470000 	.word	0x42470000
 8001dd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ea      	bne.n	8001dba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8097 	beq.w	8001f20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b83      	ldr	r3, [pc, #524]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e12:	4b7c      	ldr	r3, [pc, #496]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b79      	ldr	r3, [pc, #484]	@ (8002008 <HAL_RCC_OscConfig+0x4b0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCC_OscConfig+0x4b0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a75      	ldr	r2, [pc, #468]	@ (8002008 <HAL_RCC_OscConfig+0x4b0>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f80d 	bl	8000e58 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff f809 	bl	8000e58 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e118      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b6c      	ldr	r3, [pc, #432]	@ (8002008 <HAL_RCC_OscConfig+0x4b0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x31e>
 8001e68:	4b66      	ldr	r3, [pc, #408]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a65      	ldr	r2, [pc, #404]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x358>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x340>
 8001e7e:	4b61      	ldr	r3, [pc, #388]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	4a60      	ldr	r2, [pc, #384]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x358>
 8001e98:	4b5a      	ldr	r3, [pc, #360]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9c:	4a59      	ldr	r2, [pc, #356]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea4:	4b57      	ldr	r3, [pc, #348]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea8:	4a56      	ldr	r2, [pc, #344]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d015      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb8:	f7fe ffce 	bl	8000e58 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7fe ffca 	bl	8000e58 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0d7      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ee      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x368>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7fe ffb8 	bl	8000e58 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7fe ffb4 	bl	8000e58 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0c1      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f02:	4b40      	ldr	r3, [pc, #256]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ee      	bne.n	8001eec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f14:	4b3b      	ldr	r3, [pc, #236]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	4a3a      	ldr	r2, [pc, #232]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80ad 	beq.w	8002084 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f2a:	4b36      	ldr	r3, [pc, #216]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d060      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d145      	bne.n	8001fca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b33      	ldr	r3, [pc, #204]	@ (800200c <HAL_RCC_OscConfig+0x4b4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7fe ff88 	bl	8000e58 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe ff84 	bl	8000e58 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e093      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	3b01      	subs	r3, #1
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	071b      	lsls	r3, r3, #28
 8001f96:	491b      	ldr	r1, [pc, #108]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x4b4>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe ff59 	bl	8000e58 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe ff55 	bl	8000e58 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e064      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x452>
 8001fc8:	e05c      	b.n	8002084 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <HAL_RCC_OscConfig+0x4b4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff42 	bl	8000e58 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe ff3e 	bl	8000e58 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04d      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x480>
 8001ff6:	e045      	b.n	8002084 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e040      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
 8002004:	40023800 	.word	0x40023800
 8002008:	40007000 	.word	0x40007000
 800200c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002010:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <HAL_RCC_OscConfig+0x538>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d030      	beq.n	8002080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d129      	bne.n	8002080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d122      	bne.n	8002080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002040:	4013      	ands	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002048:	4293      	cmp	r3, r2
 800204a:	d119      	bne.n	8002080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	3b01      	subs	r3, #1
 800205a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d10f      	bne.n	8002080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d107      	bne.n	8002080 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800

08002094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e041      	b.n	800212a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fce4 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f000 fbf8 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d001      	beq.n	800214c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e046      	b.n	80021da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a23      	ldr	r2, [pc, #140]	@ (80021e8 <HAL_TIM_Base_Start+0xb4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d022      	beq.n	80021a4 <HAL_TIM_Base_Start+0x70>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002166:	d01d      	beq.n	80021a4 <HAL_TIM_Base_Start+0x70>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_TIM_Base_Start+0xb8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d018      	beq.n	80021a4 <HAL_TIM_Base_Start+0x70>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_TIM_Base_Start+0xbc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_TIM_Base_Start+0x70>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1c      	ldr	r2, [pc, #112]	@ (80021f4 <HAL_TIM_Base_Start+0xc0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00e      	beq.n	80021a4 <HAL_TIM_Base_Start+0x70>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1b      	ldr	r2, [pc, #108]	@ (80021f8 <HAL_TIM_Base_Start+0xc4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d009      	beq.n	80021a4 <HAL_TIM_Base_Start+0x70>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a19      	ldr	r2, [pc, #100]	@ (80021fc <HAL_TIM_Base_Start+0xc8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_TIM_Base_Start+0x70>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a18      	ldr	r2, [pc, #96]	@ (8002200 <HAL_TIM_Base_Start+0xcc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d111      	bne.n	80021c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d010      	beq.n	80021d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	e007      	b.n	80021d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40010400 	.word	0x40010400
 80021fc:	40014000 	.word	0x40014000
 8002200:	40001800 	.word	0x40001800

08002204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d001      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e04e      	b.n	80022ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a23      	ldr	r2, [pc, #140]	@ (80022c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d022      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002246:	d01d      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <HAL_TIM_Base_Start_IT+0xc8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d018      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1e      	ldr	r2, [pc, #120]	@ (80022d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1c      	ldr	r2, [pc, #112]	@ (80022d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00e      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1b      	ldr	r2, [pc, #108]	@ (80022d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a19      	ldr	r2, [pc, #100]	@ (80022dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d004      	beq.n	8002284 <HAL_TIM_Base_Start_IT+0x80>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d010      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a6:	e007      	b.n	80022b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40000800 	.word	0x40000800
 80022d4:	40000c00 	.word	0x40000c00
 80022d8:	40010400 	.word	0x40010400
 80022dc:	40014000 	.word	0x40014000
 80022e0:	40001800 	.word	0x40001800

080022e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e041      	b.n	800237a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fc24 	bl	8000b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4610      	mov	r0, r2
 8002324:	f000 fad0 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01b      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f06f 0202 	mvn.w	r2, #2
 80023b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fa5c 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 80023d2:	e005      	b.n	80023e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fa4e 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa5f 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01b      	beq.n	8002432 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f06f 0204 	mvn.w	r2, #4
 8002402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fa36 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 800241e:	e005      	b.n	800242c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fa28 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa39 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01b      	beq.n	800247e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0208 	mvn.w	r2, #8
 800244e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2204      	movs	r2, #4
 8002454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa10 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 800246a:	e005      	b.n	8002478 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fa02 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fa13 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01b      	beq.n	80024ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f06f 0210 	mvn.w	r2, #16
 800249a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2208      	movs	r2, #8
 80024a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f9ea 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 80024b6:	e005      	b.n	80024c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f9dc 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f9ed 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f06f 0201 	mvn.w	r2, #1
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe f821 	bl	8000530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800250a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fd51 	bl	8002fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00c      	beq.n	8002536 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800252e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f9be 	bl	80028b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00c      	beq.n	800255a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f06f 0220 	mvn.w	r2, #32
 8002552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fd23 	bl	8002fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800257e:	2302      	movs	r3, #2
 8002580:	e0ae      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0c      	cmp	r3, #12
 800258e:	f200 809f 	bhi.w	80026d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080026d1 	.word	0x080026d1
 80025a0:	080026d1 	.word	0x080026d1
 80025a4:	080026d1 	.word	0x080026d1
 80025a8:	0800260d 	.word	0x0800260d
 80025ac:	080026d1 	.word	0x080026d1
 80025b0:	080026d1 	.word	0x080026d1
 80025b4:	080026d1 	.word	0x080026d1
 80025b8:	0800264f 	.word	0x0800264f
 80025bc:	080026d1 	.word	0x080026d1
 80025c0:	080026d1 	.word	0x080026d1
 80025c4:	080026d1 	.word	0x080026d1
 80025c8:	0800268f 	.word	0x0800268f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fa1e 	bl	8002a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0208 	orr.w	r2, r2, #8
 80025e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6999      	ldr	r1, [r3, #24]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	619a      	str	r2, [r3, #24]
      break;
 800260a:	e064      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fa6e 	bl	8002af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6999      	ldr	r1, [r3, #24]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	021a      	lsls	r2, r3, #8
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	619a      	str	r2, [r3, #24]
      break;
 800264c:	e043      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fac3 	bl	8002be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0208 	orr.w	r2, r2, #8
 8002668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0204 	bic.w	r2, r2, #4
 8002678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69d9      	ldr	r1, [r3, #28]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	61da      	str	r2, [r3, #28]
      break;
 800268c:	e023      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fb17 	bl	8002cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69d9      	ldr	r1, [r3, #28]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	021a      	lsls	r2, r3, #8
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	61da      	str	r2, [r3, #28]
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
      break;
 80026d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026de:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIM_ConfigClockSource+0x1c>
 8002700:	2302      	movs	r3, #2
 8002702:	e0b4      	b.n	800286e <HAL_TIM_ConfigClockSource+0x186>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800272a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800273c:	d03e      	beq.n	80027bc <HAL_TIM_ConfigClockSource+0xd4>
 800273e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002742:	f200 8087 	bhi.w	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800274a:	f000 8086 	beq.w	800285a <HAL_TIM_ConfigClockSource+0x172>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002752:	d87f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b70      	cmp	r3, #112	@ 0x70
 8002756:	d01a      	beq.n	800278e <HAL_TIM_ConfigClockSource+0xa6>
 8002758:	2b70      	cmp	r3, #112	@ 0x70
 800275a:	d87b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b60      	cmp	r3, #96	@ 0x60
 800275e:	d050      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x11a>
 8002760:	2b60      	cmp	r3, #96	@ 0x60
 8002762:	d877      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b50      	cmp	r3, #80	@ 0x50
 8002766:	d03c      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002768:	2b50      	cmp	r3, #80	@ 0x50
 800276a:	d873      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b40      	cmp	r3, #64	@ 0x40
 800276e:	d058      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x13a>
 8002770:	2b40      	cmp	r3, #64	@ 0x40
 8002772:	d86f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b30      	cmp	r3, #48	@ 0x30
 8002776:	d064      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	2b30      	cmp	r3, #48	@ 0x30
 800277a:	d86b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b20      	cmp	r3, #32
 800277e:	d060      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d867      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d05c      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002788:	2b10      	cmp	r3, #16
 800278a:	d05a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	e062      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800279e:	f000 fb63 	bl	8002e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
      break;
 80027ba:	e04f      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027cc:	f000 fb4c 	bl	8002e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027de:	609a      	str	r2, [r3, #8]
      break;
 80027e0:	e03c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 fac0 	bl	8002d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2150      	movs	r1, #80	@ 0x50
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fb19 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002800:	e02c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800280e:	461a      	mov	r2, r3
 8002810:	f000 fadf 	bl	8002dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2160      	movs	r1, #96	@ 0x60
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fb09 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002820:	e01c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	461a      	mov	r2, r3
 8002830:	f000 faa0 	bl	8002d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2140      	movs	r1, #64	@ 0x40
 800283a:	4618      	mov	r0, r3
 800283c:	f000 faf9 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002840:	e00c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f000 faf0 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002852:	e003      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e000      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800285a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a43      	ldr	r2, [pc, #268]	@ (80029e8 <TIM_Base_SetConfig+0x120>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <TIM_Base_SetConfig+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e6:	d00f      	beq.n	8002908 <TIM_Base_SetConfig+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a40      	ldr	r2, [pc, #256]	@ (80029ec <TIM_Base_SetConfig+0x124>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x40>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a3f      	ldr	r2, [pc, #252]	@ (80029f0 <TIM_Base_SetConfig+0x128>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x40>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a3e      	ldr	r2, [pc, #248]	@ (80029f4 <TIM_Base_SetConfig+0x12c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x40>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a3d      	ldr	r2, [pc, #244]	@ (80029f8 <TIM_Base_SetConfig+0x130>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a32      	ldr	r2, [pc, #200]	@ (80029e8 <TIM_Base_SetConfig+0x120>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02b      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002928:	d027      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a2f      	ldr	r2, [pc, #188]	@ (80029ec <TIM_Base_SetConfig+0x124>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d023      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a2e      	ldr	r2, [pc, #184]	@ (80029f0 <TIM_Base_SetConfig+0x128>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01f      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <TIM_Base_SetConfig+0x12c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01b      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <TIM_Base_SetConfig+0x130>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d017      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <TIM_Base_SetConfig+0x134>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <TIM_Base_SetConfig+0x138>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00f      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <TIM_Base_SetConfig+0x13c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00b      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a28      	ldr	r2, [pc, #160]	@ (8002a08 <TIM_Base_SetConfig+0x140>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a27      	ldr	r2, [pc, #156]	@ (8002a0c <TIM_Base_SetConfig+0x144>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a26      	ldr	r2, [pc, #152]	@ (8002a10 <TIM_Base_SetConfig+0x148>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a0e      	ldr	r2, [pc, #56]	@ (80029e8 <TIM_Base_SetConfig+0x120>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0xf2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a10      	ldr	r2, [pc, #64]	@ (80029f8 <TIM_Base_SetConfig+0x130>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d103      	bne.n	80029c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f043 0204 	orr.w	r2, r3, #4
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	601a      	str	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40010400 	.word	0x40010400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800
 8002a08:	40001800 	.word	0x40001800
 8002a0c:	40001c00 	.word	0x40001c00
 8002a10:	40002000 	.word	0x40002000

08002a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 0201 	bic.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 0302 	bic.w	r3, r3, #2
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a20      	ldr	r2, [pc, #128]	@ (8002aec <TIM_OC1_SetConfig+0xd8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <TIM_OC1_SetConfig+0x64>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <TIM_OC1_SetConfig+0xdc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10c      	bne.n	8002a92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0308 	bic.w	r3, r3, #8
 8002a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a15      	ldr	r2, [pc, #84]	@ (8002aec <TIM_OC1_SetConfig+0xd8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d003      	beq.n	8002aa2 <TIM_OC1_SetConfig+0x8e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <TIM_OC1_SetConfig+0xdc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d111      	bne.n	8002ac6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	621a      	str	r2, [r3, #32]
}
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40010400 	.word	0x40010400

08002af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 0210 	bic.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0320 	bic.w	r3, r3, #32
 8002b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <TIM_OC2_SetConfig+0xe4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_OC2_SetConfig+0x68>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <TIM_OC2_SetConfig+0xe8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d10d      	bne.n	8002b78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <TIM_OC2_SetConfig+0xe4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_OC2_SetConfig+0x94>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a16      	ldr	r2, [pc, #88]	@ (8002bdc <TIM_OC2_SetConfig+0xe8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d113      	bne.n	8002bb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	40010400 	.word	0x40010400

08002be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a21      	ldr	r2, [pc, #132]	@ (8002cc0 <TIM_OC3_SetConfig+0xe0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_OC3_SetConfig+0x66>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a20      	ldr	r2, [pc, #128]	@ (8002cc4 <TIM_OC3_SetConfig+0xe4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10d      	bne.n	8002c62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a16      	ldr	r2, [pc, #88]	@ (8002cc0 <TIM_OC3_SetConfig+0xe0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d003      	beq.n	8002c72 <TIM_OC3_SetConfig+0x92>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <TIM_OC3_SetConfig+0xe4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d113      	bne.n	8002c9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	621a      	str	r2, [r3, #32]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	031b      	lsls	r3, r3, #12
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <TIM_OC4_SetConfig+0xa4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d003      	beq.n	8002d30 <TIM_OC4_SetConfig+0x68>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <TIM_OC4_SetConfig+0xa8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d109      	bne.n	8002d44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	019b      	lsls	r3, r3, #6
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40010400 	.word	0x40010400

08002d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0201 	bic.w	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 030a 	bic.w	r3, r3, #10
 8002db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	621a      	str	r2, [r3, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b087      	sub	sp, #28
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f023 0210 	bic.w	r2, r3, #16
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f043 0307 	orr.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	021a      	lsls	r2, r3, #8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e05a      	b.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a21      	ldr	r2, [pc, #132]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d022      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0c:	d01d      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d018      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1a      	ldr	r2, [pc, #104]	@ (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a15      	ldr	r2, [pc, #84]	@ (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10c      	bne.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40010400 	.word	0x40010400
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40001800 	.word	0x40001800

08002fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e042      	b.n	8003060 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fe0e 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	@ 0x24
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800300a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f82b 	bl	8003068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b0c0      	sub	sp, #256	@ 0x100
 800306e:	af00      	add	r7, sp, #0
 8003070:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	68d9      	ldr	r1, [r3, #12]
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	ea40 0301 	orr.w	r3, r0, r1
 8003090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	431a      	orrs	r2, r3
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030c0:	f021 010c 	bic.w	r1, r1, #12
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030ce:	430b      	orrs	r3, r1
 80030d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e2:	6999      	ldr	r1, [r3, #24]
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	ea40 0301 	orr.w	r3, r0, r1
 80030ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003334 <UART_SetConfig+0x2cc>)
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d005      	beq.n	8003108 <UART_SetConfig+0xa0>
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b8d      	ldr	r3, [pc, #564]	@ (8003338 <UART_SetConfig+0x2d0>)
 8003104:	429a      	cmp	r2, r3
 8003106:	d104      	bne.n	8003112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003108:	f7fe fae2 	bl	80016d0 <HAL_RCC_GetPCLK2Freq>
 800310c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003110:	e003      	b.n	800311a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003112:	f7fe fac9 	bl	80016a8 <HAL_RCC_GetPCLK1Freq>
 8003116:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003124:	f040 810c 	bne.w	8003340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800312c:	2200      	movs	r2, #0
 800312e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003132:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800313a:	4622      	mov	r2, r4
 800313c:	462b      	mov	r3, r5
 800313e:	1891      	adds	r1, r2, r2
 8003140:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003142:	415b      	adcs	r3, r3
 8003144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800314a:	4621      	mov	r1, r4
 800314c:	eb12 0801 	adds.w	r8, r2, r1
 8003150:	4629      	mov	r1, r5
 8003152:	eb43 0901 	adc.w	r9, r3, r1
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800316a:	4690      	mov	r8, r2
 800316c:	4699      	mov	r9, r3
 800316e:	4623      	mov	r3, r4
 8003170:	eb18 0303 	adds.w	r3, r8, r3
 8003174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003178:	462b      	mov	r3, r5
 800317a:	eb49 0303 	adc.w	r3, r9, r3
 800317e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800318e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003196:	460b      	mov	r3, r1
 8003198:	18db      	adds	r3, r3, r3
 800319a:	653b      	str	r3, [r7, #80]	@ 0x50
 800319c:	4613      	mov	r3, r2
 800319e:	eb42 0303 	adc.w	r3, r2, r3
 80031a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80031a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031ac:	f7fd f82a 	bl	8000204 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4b61      	ldr	r3, [pc, #388]	@ (800333c <UART_SetConfig+0x2d4>)
 80031b6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	011c      	lsls	r4, r3, #4
 80031be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031d0:	4642      	mov	r2, r8
 80031d2:	464b      	mov	r3, r9
 80031d4:	1891      	adds	r1, r2, r2
 80031d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031d8:	415b      	adcs	r3, r3
 80031da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031e0:	4641      	mov	r1, r8
 80031e2:	eb12 0a01 	adds.w	sl, r2, r1
 80031e6:	4649      	mov	r1, r9
 80031e8:	eb43 0b01 	adc.w	fp, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003200:	4692      	mov	sl, r2
 8003202:	469b      	mov	fp, r3
 8003204:	4643      	mov	r3, r8
 8003206:	eb1a 0303 	adds.w	r3, sl, r3
 800320a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800320e:	464b      	mov	r3, r9
 8003210:	eb4b 0303 	adc.w	r3, fp, r3
 8003214:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003224:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800322c:	460b      	mov	r3, r1
 800322e:	18db      	adds	r3, r3, r3
 8003230:	643b      	str	r3, [r7, #64]	@ 0x40
 8003232:	4613      	mov	r3, r2
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	647b      	str	r3, [r7, #68]	@ 0x44
 800323a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800323e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003242:	f7fc ffdf 	bl	8000204 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4611      	mov	r1, r2
 800324c:	4b3b      	ldr	r3, [pc, #236]	@ (800333c <UART_SetConfig+0x2d4>)
 800324e:	fba3 2301 	umull	r2, r3, r3, r1
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2264      	movs	r2, #100	@ 0x64
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	1acb      	subs	r3, r1, r3
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003262:	4b36      	ldr	r3, [pc, #216]	@ (800333c <UART_SetConfig+0x2d4>)
 8003264:	fba3 2302 	umull	r2, r3, r3, r2
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003270:	441c      	add	r4, r3
 8003272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800327c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	1891      	adds	r1, r2, r2
 800328a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800328c:	415b      	adcs	r3, r3
 800328e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003294:	4641      	mov	r1, r8
 8003296:	1851      	adds	r1, r2, r1
 8003298:	6339      	str	r1, [r7, #48]	@ 0x30
 800329a:	4649      	mov	r1, r9
 800329c:	414b      	adcs	r3, r1
 800329e:	637b      	str	r3, [r7, #52]	@ 0x34
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032ac:	4659      	mov	r1, fp
 80032ae:	00cb      	lsls	r3, r1, #3
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b6:	4651      	mov	r1, sl
 80032b8:	00ca      	lsls	r2, r1, #3
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	4642      	mov	r2, r8
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032c8:	464b      	mov	r3, r9
 80032ca:	460a      	mov	r2, r1
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032e8:	460b      	mov	r3, r1
 80032ea:	18db      	adds	r3, r3, r3
 80032ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ee:	4613      	mov	r3, r2
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032fe:	f7fc ff81 	bl	8000204 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <UART_SetConfig+0x2d4>)
 8003308:	fba3 1302 	umull	r1, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	2164      	movs	r1, #100	@ 0x64
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	3332      	adds	r3, #50	@ 0x32
 800331a:	4a08      	ldr	r2, [pc, #32]	@ (800333c <UART_SetConfig+0x2d4>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	f003 0207 	and.w	r2, r3, #7
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4422      	add	r2, r4
 800332e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003330:	e106      	b.n	8003540 <UART_SetConfig+0x4d8>
 8003332:	bf00      	nop
 8003334:	40011000 	.word	0x40011000
 8003338:	40011400 	.word	0x40011400
 800333c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003344:	2200      	movs	r2, #0
 8003346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800334a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800334e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003352:	4642      	mov	r2, r8
 8003354:	464b      	mov	r3, r9
 8003356:	1891      	adds	r1, r2, r2
 8003358:	6239      	str	r1, [r7, #32]
 800335a:	415b      	adcs	r3, r3
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
 800335e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003362:	4641      	mov	r1, r8
 8003364:	1854      	adds	r4, r2, r1
 8003366:	4649      	mov	r1, r9
 8003368:	eb43 0501 	adc.w	r5, r3, r1
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	00eb      	lsls	r3, r5, #3
 8003376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800337a:	00e2      	lsls	r2, r4, #3
 800337c:	4614      	mov	r4, r2
 800337e:	461d      	mov	r5, r3
 8003380:	4643      	mov	r3, r8
 8003382:	18e3      	adds	r3, r4, r3
 8003384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003388:	464b      	mov	r3, r9
 800338a:	eb45 0303 	adc.w	r3, r5, r3
 800338e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800339e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033ae:	4629      	mov	r1, r5
 80033b0:	008b      	lsls	r3, r1, #2
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b8:	4621      	mov	r1, r4
 80033ba:	008a      	lsls	r2, r1, #2
 80033bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033c0:	f7fc ff20 	bl	8000204 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4b60      	ldr	r3, [pc, #384]	@ (800354c <UART_SetConfig+0x4e4>)
 80033ca:	fba3 2302 	umull	r2, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	011c      	lsls	r4, r3, #4
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	61b9      	str	r1, [r7, #24]
 80033ec:	415b      	adcs	r3, r3
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f4:	4641      	mov	r1, r8
 80033f6:	1851      	adds	r1, r2, r1
 80033f8:	6139      	str	r1, [r7, #16]
 80033fa:	4649      	mov	r1, r9
 80033fc:	414b      	adcs	r3, r1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800340c:	4659      	mov	r1, fp
 800340e:	00cb      	lsls	r3, r1, #3
 8003410:	4651      	mov	r1, sl
 8003412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003416:	4651      	mov	r1, sl
 8003418:	00ca      	lsls	r2, r1, #3
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	4603      	mov	r3, r0
 8003420:	4642      	mov	r2, r8
 8003422:	189b      	adds	r3, r3, r2
 8003424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003428:	464b      	mov	r3, r9
 800342a:	460a      	mov	r2, r1
 800342c:	eb42 0303 	adc.w	r3, r2, r3
 8003430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800343e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800344c:	4649      	mov	r1, r9
 800344e:	008b      	lsls	r3, r1, #2
 8003450:	4641      	mov	r1, r8
 8003452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003456:	4641      	mov	r1, r8
 8003458:	008a      	lsls	r2, r1, #2
 800345a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800345e:	f7fc fed1 	bl	8000204 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4611      	mov	r1, r2
 8003468:	4b38      	ldr	r3, [pc, #224]	@ (800354c <UART_SetConfig+0x4e4>)
 800346a:	fba3 2301 	umull	r2, r3, r3, r1
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2264      	movs	r2, #100	@ 0x64
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	1acb      	subs	r3, r1, r3
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	3332      	adds	r3, #50	@ 0x32
 800347c:	4a33      	ldr	r2, [pc, #204]	@ (800354c <UART_SetConfig+0x4e4>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003488:	441c      	add	r4, r3
 800348a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348e:	2200      	movs	r2, #0
 8003490:	673b      	str	r3, [r7, #112]	@ 0x70
 8003492:	677a      	str	r2, [r7, #116]	@ 0x74
 8003494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	1891      	adds	r1, r2, r2
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	415b      	adcs	r3, r3
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a8:	4641      	mov	r1, r8
 80034aa:	1851      	adds	r1, r2, r1
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	4649      	mov	r1, r9
 80034b0:	414b      	adcs	r3, r1
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034c0:	4659      	mov	r1, fp
 80034c2:	00cb      	lsls	r3, r1, #3
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ca:	4651      	mov	r1, sl
 80034cc:	00ca      	lsls	r2, r1, #3
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	4642      	mov	r2, r8
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034da:	464b      	mov	r3, r9
 80034dc:	460a      	mov	r2, r1
 80034de:	eb42 0303 	adc.w	r3, r2, r3
 80034e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034fc:	4649      	mov	r1, r9
 80034fe:	008b      	lsls	r3, r1, #2
 8003500:	4641      	mov	r1, r8
 8003502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003506:	4641      	mov	r1, r8
 8003508:	008a      	lsls	r2, r1, #2
 800350a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800350e:	f7fc fe79 	bl	8000204 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <UART_SetConfig+0x4e4>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	2164      	movs	r1, #100	@ 0x64
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	3332      	adds	r3, #50	@ 0x32
 800352a:	4a08      	ldr	r2, [pc, #32]	@ (800354c <UART_SetConfig+0x4e4>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4422      	add	r2, r4
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003546:	46bd      	mov	sp, r7
 8003548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <memset>:
 8003550:	4402      	add	r2, r0
 8003552:	4603      	mov	r3, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <__libc_init_array>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	4d0d      	ldr	r5, [pc, #52]	@ (8003598 <__libc_init_array+0x38>)
 8003564:	4c0d      	ldr	r4, [pc, #52]	@ (800359c <__libc_init_array+0x3c>)
 8003566:	1b64      	subs	r4, r4, r5
 8003568:	10a4      	asrs	r4, r4, #2
 800356a:	2600      	movs	r6, #0
 800356c:	42a6      	cmp	r6, r4
 800356e:	d109      	bne.n	8003584 <__libc_init_array+0x24>
 8003570:	4d0b      	ldr	r5, [pc, #44]	@ (80035a0 <__libc_init_array+0x40>)
 8003572:	4c0c      	ldr	r4, [pc, #48]	@ (80035a4 <__libc_init_array+0x44>)
 8003574:	f000 f818 	bl	80035a8 <_init>
 8003578:	1b64      	subs	r4, r4, r5
 800357a:	10a4      	asrs	r4, r4, #2
 800357c:	2600      	movs	r6, #0
 800357e:	42a6      	cmp	r6, r4
 8003580:	d105      	bne.n	800358e <__libc_init_array+0x2e>
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	f855 3b04 	ldr.w	r3, [r5], #4
 8003588:	4798      	blx	r3
 800358a:	3601      	adds	r6, #1
 800358c:	e7ee      	b.n	800356c <__libc_init_array+0xc>
 800358e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003592:	4798      	blx	r3
 8003594:	3601      	adds	r6, #1
 8003596:	e7f2      	b.n	800357e <__libc_init_array+0x1e>
 8003598:	080035e0 	.word	0x080035e0
 800359c:	080035e0 	.word	0x080035e0
 80035a0:	080035e0 	.word	0x080035e0
 80035a4:	080035e4 	.word	0x080035e4

080035a8 <_init>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr

080035b4 <_fini>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr
